/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/calibration_screen/CalibrationViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


CalibrationViewBase::CalibrationViewBase() :
    buttonCallback(this, &CalibrationViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &CalibrationViewBase::flexButtonCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));

    btn_return_c.setXY(5, 5);
    btn_return_c.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDE11_ID), touchgfx::Bitmap(BITMAP_SLIDE23_ID), touchgfx::Bitmap(BITMAP_SLIDE11_ID), touchgfx::Bitmap(BITMAP_SLIDE23_ID));
    btn_return_c.setIconXY(0, 0);
    btn_return_c.setAction(buttonCallback);

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_CARTOON_HEAD_DINOSAUR_FOSSIL_ID));
    scalableImage1.setPosition(612, 0, 170, 153);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    textArea1_1.setXY(140, 20);
    textArea1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea1_1.setLinespacing(0);
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I61E));

    line1_2.setPosition(140, 69, 246, 22);
    line1_2Painter.setColor(touchgfx::Color::getColorFromRGB(119, 85, 47));
    line1_2.setPainter(line1_2Painter);
    line1_2.setStart(5, 5);
    line1_2.setEnd(241, 5);
    line1_2.setLineWidth(5);
    line1_2.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);

    textArea1.setPosition(424, 153, 240, 37);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0AX3));

    line1_1.setPosition(424, 190, 240, 19);
    line1_1Painter.setColor(touchgfx::Color::getColorFromRGB(220, 186, 130));
    line1_1.setPainter(line1_1Painter);
    line1_1.setStart(5, 5);
    line1_1.setEnd(235, 5);
    line1_1.setLineWidth(5);
    line1_1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);

    btn_p_c.setBitmaps(Bitmap(BITMAP_SLIDE1_120_ID), Bitmap(BITMAP_SLIDE2_120_ID));
    btn_p_c.setBitmapXY(0, 0);
    btn_p_c.setText(TypedText(T___SINGLEUSE_AGG5));
    btn_p_c.setTextPosition(0, 79, 120, 200);
    btn_p_c.setTextColors(touchgfx::Color::getColorFromRGB(248, 242, 232), touchgfx::Color::getColorFromRGB(196, 192, 185));
    btn_p_c.setPosition(544, 229, 120, 200);
    btn_p_c.setAction(flexButtonCallback);

    textArea1_2.setPosition(137, 153, 240, 37);
    textArea1_2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea1_2.setLinespacing(0);
    textArea1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QMUY));

    line1_1_1.setPosition(137, 190, 240, 19);
    line1_1_1Painter.setColor(touchgfx::Color::getColorFromRGB(220, 186, 130));
    line1_1_1.setPainter(line1_1_1Painter);
    line1_1_1.setStart(5, 5);
    line1_1_1.setEnd(235, 5);
    line1_1_1.setLineWidth(5);
    line1_1_1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);

    btn_s_c.setBitmaps(Bitmap(BITMAP_SLIDE1_120_ID), Bitmap(BITMAP_SLIDE2_120_ID));
    btn_s_c.setBitmapXY(0, 0);
    btn_s_c.setText(TypedText(T___SINGLEUSE_HP20));
    btn_s_c.setTextPosition(0, 79, 120, 200);
    btn_s_c.setTextColors(touchgfx::Color::getColorFromRGB(248, 242, 232), touchgfx::Color::getColorFromRGB(196, 192, 185));
    btn_s_c.setPosition(257, 229, 120, 200);
    btn_s_c.setAction(flexButtonCallback);

    btn_center.setXY(424, 289);
    btn_center.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDE25_ID), touchgfx::Bitmap(BITMAP_SLIDE26_ID), touchgfx::Bitmap(BITMAP_SLIDE25_ID), touchgfx::Bitmap(BITMAP_SLIDE26_ID));
    btn_center.setIconXY(0, 0);
    btn_center.setAction(buttonCallback);

    btn_plus_c.setXY(137, 225);
    btn_plus_c.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDE1_ID), touchgfx::Bitmap(BITMAP_SLIDE13_ID), touchgfx::Bitmap(BITMAP_SLIDE1_ID), touchgfx::Bitmap(BITMAP_SLIDE13_ID));
    btn_plus_c.setIconXY(0, 0);
    btn_plus_c.setAction(buttonCallback);

    btn_minus_c.setXY(137, 354);
    btn_minus_c.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDE2_ID), touchgfx::Bitmap(BITMAP_SLIDE14_ID), touchgfx::Bitmap(BITMAP_SLIDE2_ID), touchgfx::Bitmap(BITMAP_SLIDE14_ID));
    btn_minus_c.setIconXY(0, 0);
    btn_minus_c.setAction(buttonCallback);

    textArea2.setPosition(137, 305, 80, 49);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea2.setLinespacing(0);
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6Y1X).getText());
    textArea2.setWildcard(textArea2Buffer);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AS0S));

    add(__background);
    add(box1);
    add(btn_return_c);
    add(scalableImage1);
    add(textArea1_1);
    add(line1_2);
    add(textArea1);
    add(line1_1);
    add(btn_p_c);
    add(textArea1_2);
    add(line1_1_1);
    add(btn_s_c);
    add(btn_center);
    add(btn_plus_c);
    add(btn_minus_c);
    add(textArea2);
}

void CalibrationViewBase::setupScreen()
{

    //Init_c
    //When screen transition begins call virtual function
    //Call init_c
    init_c();

}

void CalibrationViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btn_return_c)
    {
        //Return_c
        //When btn_return_c clicked change screen to Main
        //Go to Main with no screen transition
        application().gotoMainScreenNoTransition();
    }
    else if (&src == &btn_center)
    {
        //Btn_center
        //When btn_center clicked call virtual function
        //Call center_c
        center_c();
    }
    else if (&src == &btn_plus_c)
    {
        //Btn_plus_c
        //When btn_plus_c clicked call virtual function
        //Call plus_c
        plus_c();
    }
    else if (&src == &btn_minus_c)
    {
        //Btn_minus_c
        //When btn_minus_c clicked call virtual function
        //Call minus_c
        minus_c();
    }
}

void CalibrationViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &btn_p_c)
    {
        //Btn_pict_c
        //When btn_p_c clicked call virtual function
        //Call pict_c
        pict_c();
    }
    else if (&src == &btn_s_c)
    {
        //Btn_start_c
        //When btn_s_c clicked call virtual function
        //Call start_c
        start_c();
    }
}
