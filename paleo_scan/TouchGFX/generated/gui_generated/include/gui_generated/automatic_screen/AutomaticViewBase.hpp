/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef AUTOMATICVIEWBASE_HPP
#define AUTOMATICVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/automatic_screen/AutomaticPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/SwipeContainer.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class AutomaticViewBase : public touchgfx::View<AutomaticPresenter>
{
public:
    AutomaticViewBase();
    virtual ~AutomaticViewBase() {}
    virtual void setupScreen();
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void btn_pict_h_p()
    {
        // Override and implement this function in Automatic
    }

    virtual void btn_pict_h_m()
    {
        // Override and implement this function in Automatic
    }

    virtual void btn_pict_v_p()
    {
        // Override and implement this function in Automatic
    }

    virtual void btn_pict_v_m()
    {
        // Override and implement this function in Automatic
    }

    virtual void btn_offs_h_p()
    {
        // Override and implement this function in Automatic
    }

    virtual void btn_offs_h_m()
    {
        // Override and implement this function in Automatic
    }

    virtual void btn_offs_v_p()
    {
        // Override and implement this function in Automatic
    }

    virtual void btn_offs_v_m()
    {
        // Override and implement this function in Automatic
    }

    virtual void btn_start_auto()
    {
        // Override and implement this function in Automatic
    }

    virtual void init_pict()
    {
        // Override and implement this function in Automatic
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::SwipeContainer swipeContainer1;
    touchgfx::Container swipeContainer1Page2;
    touchgfx::Container container5;
    touchgfx::Box box2;
    touchgfx::TextArea textArea8;
    touchgfx::ScalableImage scalableImage1_1;
    touchgfx::Container swipeContainer1Page1;
    touchgfx::Container container4;
    touchgfx::Box box1;
    touchgfx::ButtonWithIcon btn_return_a;
    touchgfx::Container container1;
    touchgfx::TextArea textArea1;
    touchgfx::TextArea textArea2;
    touchgfx::TextArea textArea3;
    touchgfx::TextAreaWithOneWildcard pict_h;
    touchgfx::TextAreaWithOneWildcard pict_v;
    touchgfx::ButtonWithIcon pict_h_minus;
    touchgfx::ButtonWithIcon pict_h_plus;
    touchgfx::ButtonWithIcon pict_v_minus;
    touchgfx::ButtonWithIcon pict_v_plus;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;
    touchgfx::Container container2;
    touchgfx::TextArea textArea3_1;
    touchgfx::TextAreaWithOneWildcard offs_h;
    touchgfx::TextAreaWithOneWildcard offs_v;
    touchgfx::ButtonWithIcon offs_h_minus;
    touchgfx::ButtonWithIcon offs_h_plus;
    touchgfx::ButtonWithIcon offs_v_minus;
    touchgfx::ButtonWithIcon offs_v_plus;
    touchgfx::TextArea textArea6;
    touchgfx::TextArea textArea7;
    touchgfx::Line line1_1;
    touchgfx::PainterRGB565 line1_1Painter;
    touchgfx::ScalableImage scalableImage1;
    touchgfx::TextButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  start_auto;
    touchgfx::Container container3;
    touchgfx::TextArea textArea1_1;
    touchgfx::Line line1_2;
    touchgfx::PainterRGB565 line1_2Painter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t PICT_H_SIZE = 5;
    touchgfx::Unicode::UnicodeChar pict_hBuffer[PICT_H_SIZE];
    static const uint16_t PICT_V_SIZE = 5;
    touchgfx::Unicode::UnicodeChar pict_vBuffer[PICT_V_SIZE];
    static const uint16_t OFFS_H_SIZE = 5;
    touchgfx::Unicode::UnicodeChar offs_hBuffer[OFFS_H_SIZE];
    static const uint16_t OFFS_V_SIZE = 5;
    touchgfx::Unicode::UnicodeChar offs_vBuffer[OFFS_V_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<AutomaticViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<AutomaticViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // AUTOMATICVIEWBASE_HPP
