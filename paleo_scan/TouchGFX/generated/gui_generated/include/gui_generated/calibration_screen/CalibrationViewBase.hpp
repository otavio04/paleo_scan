/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CALIBRATIONVIEWBASE_HPP
#define CALIBRATIONVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/calibration_screen/CalibrationPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class CalibrationViewBase : public touchgfx::View<CalibrationPresenter>
{
public:
    CalibrationViewBase();
    virtual ~CalibrationViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void center_c()
    {
        // Override and implement this function in Calibration
    }

    virtual void pict_c()
    {
        // Override and implement this function in Calibration
    }

    virtual void start_c()
    {
        // Override and implement this function in Calibration
    }

    virtual void plus_c()
    {
        // Override and implement this function in Calibration
    }

    virtual void minus_c()
    {
        // Override and implement this function in Calibration
    }

    virtual void init_c()
    {
        // Override and implement this function in Calibration
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::ButtonWithIcon btn_return_c;
    touchgfx::ScalableImage scalableImage1;
    touchgfx::TextArea textArea1_1;
    touchgfx::Line line1_2;
    touchgfx::PainterRGB565 line1_2Painter;
    touchgfx::TextArea textArea1;
    touchgfx::Line line1_1;
    touchgfx::PainterRGB565 line1_1Painter;
    touchgfx::TextButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  btn_p_c;
    touchgfx::TextArea textArea1_2;
    touchgfx::Line line1_1_1;
    touchgfx::PainterRGB565 line1_1_1Painter;
    touchgfx::TextButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  btn_s_c;
    touchgfx::ButtonWithIcon btn_center;
    touchgfx::ButtonWithIcon btn_plus_c;
    touchgfx::ButtonWithIcon btn_minus_c;
    touchgfx::TextAreaWithOneWildcard textArea2;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA2_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textArea2Buffer[TEXTAREA2_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<CalibrationViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<CalibrationViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // CALIBRATIONVIEWBASE_HPP
