
just_super_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000503c  080001b8  080001b8  000101b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080051f8  080051f8  000151f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f0  080053f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000002f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4bf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d2  00000000  00000000  0002a4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c0  00000000  00000000  0002c958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287be  00000000  00000000  0002d318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdd2  00000000  00000000  00055ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f394a  00000000  00000000  000618a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001551f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fb0  00000000  00000000  00155244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b8 <__do_global_dtors_aux>:
 80001b8:	b510      	push	{r4, lr}
 80001ba:	4c05      	ldr	r4, [pc, #20]	; (80001d0 <__do_global_dtors_aux+0x18>)
 80001bc:	7823      	ldrb	r3, [r4, #0]
 80001be:	b933      	cbnz	r3, 80001ce <__do_global_dtors_aux+0x16>
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x1c>)
 80001c2:	b113      	cbz	r3, 80001ca <__do_global_dtors_aux+0x12>
 80001c4:	4804      	ldr	r0, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x20>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	2301      	movs	r3, #1
 80001cc:	7023      	strb	r3, [r4, #0]
 80001ce:	bd10      	pop	{r4, pc}
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	00000000 	.word	0x00000000
 80001d8:	080051dc 	.word	0x080051dc

080001dc <frame_dummy>:
 80001dc:	b508      	push	{r3, lr}
 80001de:	4b03      	ldr	r3, [pc, #12]	; (80001ec <frame_dummy+0x10>)
 80001e0:	b11b      	cbz	r3, 80001ea <frame_dummy+0xe>
 80001e2:	4903      	ldr	r1, [pc, #12]	; (80001f0 <frame_dummy+0x14>)
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <frame_dummy+0x18>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	bd08      	pop	{r3, pc}
 80001ec:	00000000 	.word	0x00000000
 80001f0:	20000010 	.word	0x20000010
 80001f4:	080051dc 	.word	0x080051dc

080001f8 <__aeabi_drsub>:
 80001f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001fc:	e002      	b.n	8000204 <__adddf3>
 80001fe:	bf00      	nop

08000200 <__aeabi_dsub>:
 8000200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000204 <__adddf3>:
 8000204:	b530      	push	{r4, r5, lr}
 8000206:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020e:	ea94 0f05 	teq	r4, r5
 8000212:	bf08      	it	eq
 8000214:	ea90 0f02 	teqeq	r0, r2
 8000218:	bf1f      	itttt	ne
 800021a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000222:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000226:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022a:	f000 80e2 	beq.w	80003f2 <__adddf3+0x1ee>
 800022e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000232:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000236:	bfb8      	it	lt
 8000238:	426d      	neglt	r5, r5
 800023a:	dd0c      	ble.n	8000256 <__adddf3+0x52>
 800023c:	442c      	add	r4, r5
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	ea82 0000 	eor.w	r0, r2, r0
 800024a:	ea83 0101 	eor.w	r1, r3, r1
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	2d36      	cmp	r5, #54	; 0x36
 8000258:	bf88      	it	hi
 800025a:	bd30      	pophi	{r4, r5, pc}
 800025c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000260:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000264:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000268:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x70>
 800026e:	4240      	negs	r0, r0
 8000270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000274:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000278:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800027c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000280:	d002      	beq.n	8000288 <__adddf3+0x84>
 8000282:	4252      	negs	r2, r2
 8000284:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000288:	ea94 0f05 	teq	r4, r5
 800028c:	f000 80a7 	beq.w	80003de <__adddf3+0x1da>
 8000290:	f1a4 0401 	sub.w	r4, r4, #1
 8000294:	f1d5 0e20 	rsbs	lr, r5, #32
 8000298:	db0d      	blt.n	80002b6 <__adddf3+0xb2>
 800029a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029e:	fa22 f205 	lsr.w	r2, r2, r5
 80002a2:	1880      	adds	r0, r0, r2
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ac:	1880      	adds	r0, r0, r2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	4159      	adcs	r1, r3
 80002b4:	e00e      	b.n	80002d4 <__adddf3+0xd0>
 80002b6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ba:	f10e 0e20 	add.w	lr, lr, #32
 80002be:	2a01      	cmp	r2, #1
 80002c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c4:	bf28      	it	cs
 80002c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	18c0      	adds	r0, r0, r3
 80002d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d8:	d507      	bpl.n	80002ea <__adddf3+0xe6>
 80002da:	f04f 0e00 	mov.w	lr, #0
 80002de:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ee:	d31b      	bcc.n	8000328 <__adddf3+0x124>
 80002f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f4:	d30c      	bcc.n	8000310 <__adddf3+0x10c>
 80002f6:	0849      	lsrs	r1, r1, #1
 80002f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000300:	f104 0401 	add.w	r4, r4, #1
 8000304:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000308:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800030c:	f080 809a 	bcs.w	8000444 <__adddf3+0x240>
 8000310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	ea41 0105 	orr.w	r1, r1, r5
 8000326:	bd30      	pop	{r4, r5, pc}
 8000328:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800032c:	4140      	adcs	r0, r0
 800032e:	eb41 0101 	adc.w	r1, r1, r1
 8000332:	3c01      	subs	r4, #1
 8000334:	bf28      	it	cs
 8000336:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033a:	d2e9      	bcs.n	8000310 <__adddf3+0x10c>
 800033c:	f091 0f00 	teq	r1, #0
 8000340:	bf04      	itt	eq
 8000342:	4601      	moveq	r1, r0
 8000344:	2000      	moveq	r0, #0
 8000346:	fab1 f381 	clz	r3, r1
 800034a:	bf08      	it	eq
 800034c:	3320      	addeq	r3, #32
 800034e:	f1a3 030b 	sub.w	r3, r3, #11
 8000352:	f1b3 0220 	subs.w	r2, r3, #32
 8000356:	da0c      	bge.n	8000372 <__adddf3+0x16e>
 8000358:	320c      	adds	r2, #12
 800035a:	dd08      	ble.n	800036e <__adddf3+0x16a>
 800035c:	f102 0c14 	add.w	ip, r2, #20
 8000360:	f1c2 020c 	rsb	r2, r2, #12
 8000364:	fa01 f00c 	lsl.w	r0, r1, ip
 8000368:	fa21 f102 	lsr.w	r1, r1, r2
 800036c:	e00c      	b.n	8000388 <__adddf3+0x184>
 800036e:	f102 0214 	add.w	r2, r2, #20
 8000372:	bfd8      	it	le
 8000374:	f1c2 0c20 	rsble	ip, r2, #32
 8000378:	fa01 f102 	lsl.w	r1, r1, r2
 800037c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000380:	bfdc      	itt	le
 8000382:	ea41 010c 	orrle.w	r1, r1, ip
 8000386:	4090      	lslle	r0, r2
 8000388:	1ae4      	subs	r4, r4, r3
 800038a:	bfa2      	ittt	ge
 800038c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000390:	4329      	orrge	r1, r5
 8000392:	bd30      	popge	{r4, r5, pc}
 8000394:	ea6f 0404 	mvn.w	r4, r4
 8000398:	3c1f      	subs	r4, #31
 800039a:	da1c      	bge.n	80003d6 <__adddf3+0x1d2>
 800039c:	340c      	adds	r4, #12
 800039e:	dc0e      	bgt.n	80003be <__adddf3+0x1ba>
 80003a0:	f104 0414 	add.w	r4, r4, #20
 80003a4:	f1c4 0220 	rsb	r2, r4, #32
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f302 	lsl.w	r3, r1, r2
 80003b0:	ea40 0003 	orr.w	r0, r0, r3
 80003b4:	fa21 f304 	lsr.w	r3, r1, r4
 80003b8:	ea45 0103 	orr.w	r1, r5, r3
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f1c4 040c 	rsb	r4, r4, #12
 80003c2:	f1c4 0220 	rsb	r2, r4, #32
 80003c6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ca:	fa01 f304 	lsl.w	r3, r1, r4
 80003ce:	ea40 0003 	orr.w	r0, r0, r3
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	fa21 f004 	lsr.w	r0, r1, r4
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f094 0f00 	teq	r4, #0
 80003e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e6:	bf06      	itte	eq
 80003e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003ec:	3401      	addeq	r4, #1
 80003ee:	3d01      	subne	r5, #1
 80003f0:	e74e      	b.n	8000290 <__adddf3+0x8c>
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf18      	it	ne
 80003f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fc:	d029      	beq.n	8000452 <__adddf3+0x24e>
 80003fe:	ea94 0f05 	teq	r4, r5
 8000402:	bf08      	it	eq
 8000404:	ea90 0f02 	teqeq	r0, r2
 8000408:	d005      	beq.n	8000416 <__adddf3+0x212>
 800040a:	ea54 0c00 	orrs.w	ip, r4, r0
 800040e:	bf04      	itt	eq
 8000410:	4619      	moveq	r1, r3
 8000412:	4610      	moveq	r0, r2
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	ea91 0f03 	teq	r1, r3
 800041a:	bf1e      	ittt	ne
 800041c:	2100      	movne	r1, #0
 800041e:	2000      	movne	r0, #0
 8000420:	bd30      	popne	{r4, r5, pc}
 8000422:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000426:	d105      	bne.n	8000434 <__adddf3+0x230>
 8000428:	0040      	lsls	r0, r0, #1
 800042a:	4149      	adcs	r1, r1
 800042c:	bf28      	it	cs
 800042e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000432:	bd30      	pop	{r4, r5, pc}
 8000434:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000438:	bf3c      	itt	cc
 800043a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043e:	bd30      	popcc	{r4, r5, pc}
 8000440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000444:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000456:	bf1a      	itte	ne
 8000458:	4619      	movne	r1, r3
 800045a:	4610      	movne	r0, r2
 800045c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000460:	bf1c      	itt	ne
 8000462:	460b      	movne	r3, r1
 8000464:	4602      	movne	r2, r0
 8000466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046a:	bf06      	itte	eq
 800046c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000470:	ea91 0f03 	teqeq	r1, r3
 8000474:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	bf00      	nop

0800047c <__aeabi_ui2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f04f 0500 	mov.w	r5, #0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e750      	b.n	800033c <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_i2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b4:	bf48      	it	mi
 80004b6:	4240      	negmi	r0, r0
 80004b8:	f04f 0100 	mov.w	r1, #0
 80004bc:	e73e      	b.n	800033c <__adddf3+0x138>
 80004be:	bf00      	nop

080004c0 <__aeabi_f2d>:
 80004c0:	0042      	lsls	r2, r0, #1
 80004c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ce:	bf1f      	itttt	ne
 80004d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004dc:	4770      	bxne	lr
 80004de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e2:	bf08      	it	eq
 80004e4:	4770      	bxeq	lr
 80004e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ea:	bf04      	itt	eq
 80004ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e71c      	b.n	800033c <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aed8 	beq.w	80002ea <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6bd      	b.n	80002ea <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2iz>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aac:	d215      	bcs.n	8000ada <__aeabi_d2iz+0x36>
 8000aae:	d511      	bpl.n	8000ad4 <__aeabi_d2iz+0x30>
 8000ab0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab8:	d912      	bls.n	8000ae0 <__aeabi_d2iz+0x3c>
 8000aba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	bf18      	it	ne
 8000ad0:	4240      	negne	r0, r0
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ade:	d105      	bne.n	8000aec <__aeabi_d2iz+0x48>
 8000ae0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	bf08      	it	eq
 8000ae6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_d2uiz>:
 8000af4:	004a      	lsls	r2, r1, #1
 8000af6:	d211      	bcs.n	8000b1c <__aeabi_d2uiz+0x28>
 8000af8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000afc:	d211      	bcs.n	8000b22 <__aeabi_d2uiz+0x2e>
 8000afe:	d50d      	bpl.n	8000b1c <__aeabi_d2uiz+0x28>
 8000b00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b08:	d40e      	bmi.n	8000b28 <__aeabi_d2uiz+0x34>
 8000b0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b26:	d102      	bne.n	8000b2e <__aeabi_d2uiz+0x3a>
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	4770      	bx	lr
 8000b2e:	f04f 0000 	mov.w	r0, #0
 8000b32:	4770      	bx	lr

08000b34 <__aeabi_d2f>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b3c:	bf24      	itt	cs
 8000b3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b46:	d90d      	bls.n	8000b64 <__aeabi_d2f+0x30>
 8000b48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b5c:	bf08      	it	eq
 8000b5e:	f020 0001 	biceq.w	r0, r0, #1
 8000b62:	4770      	bx	lr
 8000b64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b68:	d121      	bne.n	8000bae <__aeabi_d2f+0x7a>
 8000b6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6e:	bfbc      	itt	lt
 8000b70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	4770      	bxlt	lr
 8000b76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7e:	f1c2 0218 	rsb	r2, r2, #24
 8000b82:	f1c2 0c20 	rsb	ip, r2, #32
 8000b86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8e:	bf18      	it	ne
 8000b90:	f040 0001 	orrne.w	r0, r0, #1
 8000b94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba0:	ea40 000c 	orr.w	r0, r0, ip
 8000ba4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bac:	e7cc      	b.n	8000b48 <__aeabi_d2f+0x14>
 8000bae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb2:	d107      	bne.n	8000bc4 <__aeabi_d2f+0x90>
 8000bb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb8:	bf1e      	ittt	ne
 8000bba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bbe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc2:	4770      	bxne	lr
 8000bc4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_uldivmod>:
 8000bd4:	b953      	cbnz	r3, 8000bec <__aeabi_uldivmod+0x18>
 8000bd6:	b94a      	cbnz	r2, 8000bec <__aeabi_uldivmod+0x18>
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	bf08      	it	eq
 8000bdc:	2800      	cmpeq	r0, #0
 8000bde:	bf1c      	itt	ne
 8000be0:	f04f 31ff 	movne.w	r1, #4294967295
 8000be4:	f04f 30ff 	movne.w	r0, #4294967295
 8000be8:	f000 b974 	b.w	8000ed4 <__aeabi_idiv0>
 8000bec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf4:	f000 f806 	bl	8000c04 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4770      	bx	lr

08000c04 <__udivmoddi4>:
 8000c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c08:	9d08      	ldr	r5, [sp, #32]
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	468e      	mov	lr, r1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d14d      	bne.n	8000cae <__udivmoddi4+0xaa>
 8000c12:	428a      	cmp	r2, r1
 8000c14:	4694      	mov	ip, r2
 8000c16:	d969      	bls.n	8000cec <__udivmoddi4+0xe8>
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	b152      	cbz	r2, 8000c34 <__udivmoddi4+0x30>
 8000c1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c22:	f1c2 0120 	rsb	r1, r2, #32
 8000c26:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c32:	4094      	lsls	r4, r2
 8000c34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c38:	0c21      	lsrs	r1, r4, #16
 8000c3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3e:	fa1f f78c 	uxth.w	r7, ip
 8000c42:	fb08 e316 	mls	r3, r8, r6, lr
 8000c46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4a:	fb06 f107 	mul.w	r1, r6, r7
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x64>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 811f 	bcs.w	8000e9c <__udivmoddi4+0x298>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 811c 	bls.w	8000e9c <__udivmoddi4+0x298>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	4463      	add	r3, ip
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 f707 	mul.w	r7, r0, r7
 8000c7c:	42a7      	cmp	r7, r4
 8000c7e:	d90a      	bls.n	8000c96 <__udivmoddi4+0x92>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c88:	f080 810a 	bcs.w	8000ea0 <__udivmoddi4+0x29c>
 8000c8c:	42a7      	cmp	r7, r4
 8000c8e:	f240 8107 	bls.w	8000ea0 <__udivmoddi4+0x29c>
 8000c92:	4464      	add	r4, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9a:	1be4      	subs	r4, r4, r7
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa4>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xc2>
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	f000 80ef 	beq.w	8000e96 <__udivmoddi4+0x292>
 8000cb8:	2600      	movs	r6, #0
 8000cba:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f683 	clz	r6, r3
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d14a      	bne.n	8000d64 <__udivmoddi4+0x160>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd4>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80f9 	bhi.w	8000eca <__udivmoddi4+0x2c6>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	469e      	mov	lr, r3
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa4>
 8000ce6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa4>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xec>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 8092 	bne.w	8000e1e <__udivmoddi4+0x21a>
 8000cfa:	eba1 010c 	sub.w	r1, r1, ip
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2601      	movs	r6, #1
 8000d08:	0c20      	lsrs	r0, r4, #16
 8000d0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d16:	fb0e f003 	mul.w	r0, lr, r3
 8000d1a:	4288      	cmp	r0, r1
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x12c>
 8000d1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x12a>
 8000d28:	4288      	cmp	r0, r1
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2c0>
 8000d2e:	4643      	mov	r3, r8
 8000d30:	1a09      	subs	r1, r1, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d38:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x156>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x154>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2ca>
 8000d58:	4608      	mov	r0, r1
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x9a>
 8000d64:	f1c6 0720 	rsb	r7, r6, #32
 8000d68:	40b3      	lsls	r3, r6
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa20 f407 	lsr.w	r4, r0, r7
 8000d76:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7a:	431c      	orrs	r4, r3
 8000d7c:	40f9      	lsrs	r1, r7
 8000d7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d82:	fa00 f306 	lsl.w	r3, r0, r6
 8000d86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8a:	0c20      	lsrs	r0, r4, #16
 8000d8c:	fa1f fe8c 	uxth.w	lr, ip
 8000d90:	fb09 1118 	mls	r1, r9, r8, r1
 8000d94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d98:	fb08 f00e 	mul.w	r0, r8, lr
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b8>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2bc>
 8000db0:	4288      	cmp	r0, r1
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2bc>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4461      	add	r1, ip
 8000dbc:	1a09      	subs	r1, r1, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc4:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd0:	458e      	cmp	lr, r1
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1e2>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2b4>
 8000dde:	458e      	cmp	lr, r1
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2b4>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4461      	add	r1, ip
 8000de6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dea:	fba0 9402 	umull	r9, r4, r0, r2
 8000dee:	eba1 010e 	sub.w	r1, r1, lr
 8000df2:	42a1      	cmp	r1, r4
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46a6      	mov	lr, r4
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x2a4>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x2a0>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x212>
 8000dfe:	ebb3 0208 	subs.w	r2, r3, r8
 8000e02:	eb61 010e 	sbc.w	r1, r1, lr
 8000e06:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0e:	40f1      	lsrs	r1, r6
 8000e10:	431f      	orrs	r7, r3
 8000e12:	e9c5 7100 	strd	r7, r1, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	40d8      	lsrs	r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2c:	4091      	lsls	r1, r2
 8000e2e:	4301      	orrs	r1, r0
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e3c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e40:	0c0b      	lsrs	r3, r1, #16
 8000e42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e46:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4a:	429e      	cmp	r6, r3
 8000e4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x260>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b8>
 8000e5c:	429e      	cmp	r6, r3
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b8>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1b9b      	subs	r3, r3, r6
 8000e66:	b289      	uxth	r1, r1
 8000e68:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e6c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb06 f30e 	mul.w	r3, r6, lr
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x28a>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2b0>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2b0>
 8000e8a:	3e02      	subs	r6, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0x104>
 8000e96:	462e      	mov	r6, r5
 8000e98:	4628      	mov	r0, r5
 8000e9a:	e705      	b.n	8000ca8 <__udivmoddi4+0xa4>
 8000e9c:	4606      	mov	r6, r0
 8000e9e:	e6e3      	b.n	8000c68 <__udivmoddi4+0x64>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6f8      	b.n	8000c96 <__udivmoddi4+0x92>
 8000ea4:	454b      	cmp	r3, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f8>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f8>
 8000eb4:	4646      	mov	r6, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x28a>
 8000eb8:	4620      	mov	r0, r4
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1e2>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x260>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b8>
 8000ec4:	3b02      	subs	r3, #2
 8000ec6:	4461      	add	r1, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x12c>
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e709      	b.n	8000ce2 <__udivmoddi4+0xde>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x156>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000ee4:	f002 f984 	bl	80031f0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000028 	.word	0x20000028
 8000efc:	200000d0 	.word	0x200000d0

08000f00 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	b2d9      	uxtb	r1, r3
 8000f12:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <Set_LED+0x58>)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <Set_LED+0x58>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	460a      	mov	r2, r1
 8000f28:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	b2d9      	uxtb	r1, r3
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <Set_LED+0x58>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	460a      	mov	r2, r1
 8000f38:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2d9      	uxtb	r1, r3
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <Set_LED+0x58>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	460a      	mov	r2, r1
 8000f48:	70da      	strb	r2, [r3, #3]
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200000d4 	.word	0x200000d4
 8000f5c:	00000000 	.word	0x00000000

08000f60 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f6c:	dd01      	ble.n	8000f72 <Set_Brightness+0x12>
 8000f6e:	232d      	movs	r3, #45	; 0x2d
 8000f70:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e060      	b.n	800103a <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000f78:	4a37      	ldr	r2, [pc, #220]	; (8001058 <Set_Brightness+0xf8>)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f80:	4a36      	ldr	r2, [pc, #216]	; (800105c <Set_Brightness+0xfc>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8000f88:	2301      	movs	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e04f      	b.n	800102e <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f7ff fa8d 	bl	80004c0 <__aeabi_f2d>
 8000fa6:	a32a      	add	r3, pc, #168	; (adr r3, 8001050 <Set_Brightness+0xf0>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fae0 	bl	8000570 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <Set_Brightness+0x100>)
 8000fbe:	f7ff fc01 	bl	80007c4 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fdb3 	bl	8000b34 <__aeabi_d2f>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000fd2:	4a21      	ldr	r2, [pc, #132]	; (8001058 <Set_Brightness+0xf8>)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	441a      	add	r2, r3
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa5b 	bl	800049c <__aeabi_i2d>
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	460d      	mov	r5, r1
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f7ff fa68 	bl	80004c0 <__aeabi_f2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	ec43 2b10 	vmov	d0, r2, r3
 8000ff8:	f003 f81a 	bl	8004030 <tan>
 8000ffc:	ec53 2b10 	vmov	r2, r3, d0
 8001000:	4620      	mov	r0, r4
 8001002:	4629      	mov	r1, r5
 8001004:	f7ff fbde 	bl	80007c4 <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fd70 	bl	8000af4 <__aeabi_d2uiz>
 8001014:	4603      	mov	r3, r0
 8001016:	b2d9      	uxtb	r1, r3
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <Set_Brightness+0xfc>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	441a      	add	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4413      	add	r3, r2
 8001024:	460a      	mov	r2, r1
 8001026:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	3301      	adds	r3, #1
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	2b03      	cmp	r3, #3
 8001032:	ddac      	ble.n	8000f8e <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	2b07      	cmp	r3, #7
 800103e:	dd9b      	ble.n	8000f78 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	53c8d4f1 	.word	0x53c8d4f1
 8001054:	400921fb 	.word	0x400921fb
 8001058:	200000d4 	.word	0x200000d4
 800105c:	200000f4 	.word	0x200000f4
 8001060:	40668000 	.word	0x40668000

08001064 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	e036      	b.n	80010e2 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001074:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <WS2812_Send+0xcc>)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	041a      	lsls	r2, r3, #16
 8001080:	492b      	ldr	r1, [pc, #172]	; (8001130 <WS2812_Send+0xcc>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	431a      	orrs	r2, r3
 800108e:	4928      	ldr	r1, [pc, #160]	; (8001130 <WS2812_Send+0xcc>)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	78db      	ldrb	r3, [r3, #3]
 8001098:	4313      	orrs	r3, r2
 800109a:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 800109c:	2317      	movs	r3, #23
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e019      	b.n	80010d6 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80010a2:	2201      	movs	r2, #1
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80010b4:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <WS2812_Send+0xd0>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	213c      	movs	r1, #60	; 0x3c
 80010ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010be:	e004      	b.n	80010ca <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <WS2812_Send+0xd0>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	211e      	movs	r1, #30
 80010c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	dae2      	bge.n	80010a2 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	3301      	adds	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	ddc5      	ble.n	8001074 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	e00a      	b.n	8001104 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <WS2812_Send+0xd0>)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2100      	movs	r1, #0
 80010f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3301      	adds	r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2b31      	cmp	r3, #49	; 0x31
 8001108:	ddf1      	ble.n	80010ee <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4a09      	ldr	r2, [pc, #36]	; (8001134 <WS2812_Send+0xd0>)
 8001110:	2100      	movs	r1, #0
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <WS2812_Send+0xd4>)
 8001114:	f001 fea4 	bl	8002e60 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001118:	bf00      	nop
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <WS2812_Send+0xd8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0fb      	beq.n	800111a <WS2812_Send+0xb6>
	datasentflag = 0;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <WS2812_Send+0xd8>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000f4 	.word	0x200000f4
 8001134:	20000114 	.word	0x20000114
 8001138:	20000028 	.word	0x20000028
 800113c:	200000d0 	.word	0x200000d0

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f000 facd 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f859 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 f983 	bl	8001458 <MX_GPIO_Init>
  MX_DMA_Init();
 8001152:	f000 f961 	bl	8001418 <MX_DMA_Init>
  MX_TIM1_Init();
 8001156:	f000 f8bf 	bl	80012d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
	Set_LED(0, 255, 0, 0);
 800115a:	2300      	movs	r3, #0
 800115c:	2200      	movs	r2, #0
 800115e:	21ff      	movs	r1, #255	; 0xff
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fecd 	bl	8000f00 <Set_LED>
	Set_LED(1, 0, 255, 0);
 8001166:	2300      	movs	r3, #0
 8001168:	22ff      	movs	r2, #255	; 0xff
 800116a:	2100      	movs	r1, #0
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fec7 	bl	8000f00 <Set_LED>
	Set_LED(2, 0, 0, 255);
 8001172:	23ff      	movs	r3, #255	; 0xff
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2002      	movs	r0, #2
 800117a:	f7ff fec1 	bl	8000f00 <Set_LED>

	Set_LED(3, 46, 89, 128);
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	2259      	movs	r2, #89	; 0x59
 8001182:	212e      	movs	r1, #46	; 0x2e
 8001184:	2003      	movs	r0, #3
 8001186:	f7ff febb 	bl	8000f00 <Set_LED>

	Set_LED(4, 156, 233, 100);
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	22e9      	movs	r2, #233	; 0xe9
 800118e:	219c      	movs	r1, #156	; 0x9c
 8001190:	2004      	movs	r0, #4
 8001192:	f7ff feb5 	bl	8000f00 <Set_LED>
	Set_LED(5, 102, 0, 235);
 8001196:	23eb      	movs	r3, #235	; 0xeb
 8001198:	2200      	movs	r2, #0
 800119a:	2166      	movs	r1, #102	; 0x66
 800119c:	2005      	movs	r0, #5
 800119e:	f7ff feaf 	bl	8000f00 <Set_LED>
	Set_LED(6, 47, 38, 77);
 80011a2:	234d      	movs	r3, #77	; 0x4d
 80011a4:	2226      	movs	r2, #38	; 0x26
 80011a6:	212f      	movs	r1, #47	; 0x2f
 80011a8:	2006      	movs	r0, #6
 80011aa:	f7ff fea9 	bl	8000f00 <Set_LED>

	Set_LED(7, 255, 200, 0);
 80011ae:	2300      	movs	r3, #0
 80011b0:	22c8      	movs	r2, #200	; 0xc8
 80011b2:	21ff      	movs	r1, #255	; 0xff
 80011b4:	2007      	movs	r0, #7
 80011b6:	f7ff fea3 	bl	8000f00 <Set_LED>

	while (1)
	{

	  for (int i=0; i<46; i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	e00a      	b.n	80011d6 <main+0x96>
	  {
		  Set_Brightness(i);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fecd 	bl	8000f60 <Set_Brightness>
		  WS2812_Send();
 80011c6:	f7ff ff4d 	bl	8001064 <WS2812_Send>
		  HAL_Delay (50);
 80011ca:	2032      	movs	r0, #50	; 0x32
 80011cc:	f000 fafc 	bl	80017c8 <HAL_Delay>
	  for (int i=0; i<46; i++)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3301      	adds	r3, #1
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b2d      	cmp	r3, #45	; 0x2d
 80011da:	ddf1      	ble.n	80011c0 <main+0x80>
	  }

	  for (int i=45; i>=0; i--)
 80011dc:	232d      	movs	r3, #45	; 0x2d
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	e00a      	b.n	80011f8 <main+0xb8>
	  {
		  Set_Brightness(i);
 80011e2:	6838      	ldr	r0, [r7, #0]
 80011e4:	f7ff febc 	bl	8000f60 <Set_Brightness>
		  WS2812_Send();
 80011e8:	f7ff ff3c 	bl	8001064 <WS2812_Send>
		  HAL_Delay (50);
 80011ec:	2032      	movs	r0, #50	; 0x32
 80011ee:	f000 faeb 	bl	80017c8 <HAL_Delay>
	  for (int i=45; i>=0; i--)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	daf1      	bge.n	80011e2 <main+0xa2>
	  for (int i=0; i<46; i++)
 80011fe:	e7dc      	b.n	80011ba <main+0x7a>

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	2234      	movs	r2, #52	; 0x34
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f003 ffdc 	bl	80051cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <SystemClock_Config+0xd0>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <SystemClock_Config+0xd0>)
 800122e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001232:	6413      	str	r3, [r2, #64]	; 0x40
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <SystemClock_Config+0xd0>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001240:	2300      	movs	r3, #0
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <SystemClock_Config+0xd4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <SystemClock_Config+0xd4>)
 800124e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <SystemClock_Config+0xd4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001260:	2302      	movs	r3, #2
 8001262:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	2301      	movs	r3, #1
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001268:	2310      	movs	r3, #16
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126c:	2302      	movs	r3, #2
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001270:	2300      	movs	r3, #0
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001274:	2308      	movs	r3, #8
 8001276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001278:	2348      	movs	r3, #72	; 0x48
 800127a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001280:	2304      	movs	r3, #4
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fabb 	bl	8002808 <HAL_RCC_OscConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001298:	f000 f8f8 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129c:	230f      	movs	r3, #15
 800129e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a0:	2302      	movs	r3, #2
 80012a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	2102      	movs	r1, #2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 f8f9 	bl	80024b0 <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80012c4:	f000 f8e2 	bl	800148c <Error_Handler>
  }
}
 80012c8:	bf00      	nop
 80012ca:	3750      	adds	r7, #80	; 0x50
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000

080012d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b096      	sub	sp, #88	; 0x58
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2220      	movs	r2, #32
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f003 ff5b 	bl	80051cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001316:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <MX_TIM1_Init+0x138>)
 8001318:	4a3e      	ldr	r2, [pc, #248]	; (8001414 <MX_TIM1_Init+0x13c>)
 800131a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800131c:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <MX_TIM1_Init+0x138>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <MX_TIM1_Init+0x138>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <MX_TIM1_Init+0x138>)
 800132a:	2259      	movs	r2, #89	; 0x59
 800132c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <MX_TIM1_Init+0x138>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <MX_TIM1_Init+0x138>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b35      	ldr	r3, [pc, #212]	; (8001410 <MX_TIM1_Init+0x138>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001340:	4833      	ldr	r0, [pc, #204]	; (8001410 <MX_TIM1_Init+0x138>)
 8001342:	f001 fce5 	bl	8002d10 <HAL_TIM_Base_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800134c:	f000 f89e 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001354:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001356:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800135a:	4619      	mov	r1, r3
 800135c:	482c      	ldr	r0, [pc, #176]	; (8001410 <MX_TIM1_Init+0x138>)
 800135e:	f002 f8db 	bl	8003518 <HAL_TIM_ConfigClockSource>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001368:	f000 f890 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800136c:	4828      	ldr	r0, [pc, #160]	; (8001410 <MX_TIM1_Init+0x138>)
 800136e:	f001 fd1e 	bl	8002dae <HAL_TIM_PWM_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001378:	f000 f888 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001384:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001388:	4619      	mov	r1, r3
 800138a:	4821      	ldr	r0, [pc, #132]	; (8001410 <MX_TIM1_Init+0x138>)
 800138c:	f002 fd80 	bl	8003e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001396:	f000 f879 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139a:	2360      	movs	r3, #96	; 0x60
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	2200      	movs	r2, #0
 80013bc:	4619      	mov	r1, r3
 80013be:	4814      	ldr	r0, [pc, #80]	; (8001410 <MX_TIM1_Init+0x138>)
 80013c0:	f001 ffe8 	bl	8003394 <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013ca:	f000 f85f 	bl	800148c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM1_Init+0x138>)
 80013f2:	f002 fdc9 	bl	8003f88 <HAL_TIMEx_ConfigBreakDeadTime>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013fc:	f000 f846 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM1_Init+0x138>)
 8001402:	f000 f8c5 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8001406:	bf00      	nop
 8001408:	3758      	adds	r7, #88	; 0x58
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000028 	.word	0x20000028
 8001414:	40010000 	.word	0x40010000

08001418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_DMA_Init+0x3c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <MX_DMA_Init+0x3c>)
 8001428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_DMA_Init+0x3c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2039      	movs	r0, #57	; 0x39
 8001440:	f000 fac1 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001444:	2039      	movs	r0, #57	; 0x39
 8001446:	f000 fada 	bl	80019fe <HAL_NVIC_EnableIRQ>

}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_GPIO_Init+0x30>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <MX_GPIO_Init+0x30>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_GPIO_Init+0x30>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <Error_Handler+0x8>
	...

08001498 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_MspInit+0x4c>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_MspInit+0x4c>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_TIM_Base_MspInit+0x98>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d13d      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HAL_TIM_Base_MspInit+0x9c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HAL_TIM_Base_MspInit+0x9c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <HAL_TIM_Base_MspInit+0x9c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 8001518:	4a1c      	ldr	r2, [pc, #112]	; (800158c <HAL_TIM_Base_MspInit+0xa4>)
 800151a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 800151e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001522:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 8001526:	2240      	movs	r2, #64	; 0x40
 8001528:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 8001532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001536:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 800153a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800153e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 8001542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001546:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 800155c:	f000 fa6a 	bl	8001a34 <HAL_DMA_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001566:	f7ff ff91 	bl	800148c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a06      	ldr	r2, [pc, #24]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
 8001570:	4a05      	ldr	r2, [pc, #20]	; (8001588 <HAL_TIM_Base_MspInit+0xa0>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40010000 	.word	0x40010000
 8001584:	40023800 	.word	0x40023800
 8001588:	20000070 	.word	0x20000070
 800158c:	40026428 	.word	0x40026428

08001590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <HAL_TIM_MspPostInit+0x68>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d11e      	bne.n	80015f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_TIM_MspPostInit+0x6c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_TIM_MspPostInit+0x6c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_TIM_MspPostInit+0x6c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	4619      	mov	r1, r3
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_TIM_MspPostInit+0x70>)
 80015ec:	f000 fdb4 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40010000 	.word	0x40010000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 f89a 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA2_Stream1_IRQHandler+0x10>)
 800165e:	f000 fb11 	bl	8001c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000070 	.word	0x20000070

0800166c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001696:	490e      	ldr	r1, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ac:	4c0b      	ldr	r4, [pc, #44]	; (80016dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ba:	f7ff ffd7 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f003 fd61 	bl	8005184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fd3d 	bl	8001140 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016d4:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 80016d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016dc:	200002fc 	.word	0x200002fc

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_Init+0x40>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_Init+0x40>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_Init+0x40>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f94f 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff febe 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f967 	bl	8001a1a <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f92f 	bl	80019c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000008 	.word	0x20000008
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	200002f8 	.word	0x200002f8

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200002f8 	.word	0x200002f8

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4907      	ldr	r1, [pc, #28]	; (80018ac <__NVIC_EnableIRQ+0x38>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f7ff ff8e 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff29 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff3e 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff8e 	bl	8001904 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5d 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff31 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffa2 	bl	800196c <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff feb6 	bl	80017b0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e099      	b.n	8001b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a70:	e00f      	b.n	8001a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a72:	f7ff fe9d 	bl	80017b0 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d908      	bls.n	8001a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e078      	b.n	8001b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e8      	bne.n	8001a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_DMA_Init+0x158>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d107      	bne.n	8001afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	4313      	orrs	r3, r2
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f023 0307 	bic.w	r3, r3, #7
 8001b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d117      	bne.n	8001b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00e      	beq.n	8001b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fa91 	bl	8002060 <DMA_CheckFifoParam>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2240      	movs	r2, #64	; 0x40
 8001b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b52:	2301      	movs	r3, #1
 8001b54:	e016      	b.n	8001b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fa48 	bl	8001ff4 <DMA_CalcBaseAndBitshift>
 8001b64:	4603      	mov	r3, r0
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	223f      	movs	r2, #63	; 0x3f
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	f010803f 	.word	0xf010803f

08001b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_DMA_Start_IT+0x26>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e040      	b.n	8001c38 <HAL_DMA_Start_IT+0xa8>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d12f      	bne.n	8001c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f9da 	bl	8001f98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	223f      	movs	r2, #63	; 0x3f
 8001bea:	409a      	lsls	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0216 	orr.w	r2, r2, #22
 8001bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0208 	orr.w	r2, r2, #8
 8001c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e005      	b.n	8001c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
 8001c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d004      	beq.n	8001c5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00c      	b.n	8001c78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2205      	movs	r2, #5
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c90:	4b8e      	ldr	r3, [pc, #568]	; (8001ecc <HAL_DMA_IRQHandler+0x248>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a8e      	ldr	r2, [pc, #568]	; (8001ed0 <HAL_DMA_IRQHandler+0x24c>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0a9b      	lsrs	r3, r3, #10
 8001c9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	2208      	movs	r2, #8
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01a      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0204 	bic.w	r2, r2, #4
 8001cd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2208      	movs	r2, #8
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d012      	beq.n	8001d26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00b      	beq.n	8001d26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2201      	movs	r2, #1
 8001d14:	409a      	lsls	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f043 0202 	orr.w	r2, r3, #2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d012      	beq.n	8001d5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00b      	beq.n	8001d5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2204      	movs	r2, #4
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f043 0204 	orr.w	r2, r3, #4
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2210      	movs	r2, #16
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d043      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d03c      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2210      	movs	r2, #16
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d018      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d108      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d024      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
 8001db2:	e01f      	b.n	8001df4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01b      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
 8001dc4:	e016      	b.n	8001df4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0208 	bic.w	r2, r2, #8
 8001de2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2220      	movs	r2, #32
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 808f 	beq.w	8001f24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8087 	beq.w	8001f24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d136      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0216 	bic.w	r2, r2, #22
 8001e3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <HAL_DMA_IRQHandler+0x1da>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0208 	bic.w	r2, r2, #8
 8001e6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	223f      	movs	r2, #63	; 0x3f
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d07e      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
        }
        return;
 8001e9a:	e079      	b.n	8001f90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01d      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d031      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
 8001ec8:	e02c      	b.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d023      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
 8001ee4:	e01e      	b.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10f      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0210 	bic.w	r2, r2, #16
 8001f02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d032      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d022      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2205      	movs	r2, #5
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3301      	adds	r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d307      	bcc.n	8001f6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f2      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x2cc>
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
 8001f8e:	e000      	b.n	8001f92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f90:	bf00      	nop
    }
  }
}
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b40      	cmp	r3, #64	; 0x40
 8001fc4:	d108      	bne.n	8001fd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fd6:	e007      	b.n	8001fe8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	3b10      	subs	r3, #16
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <DMA_CalcBaseAndBitshift+0x64>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800200e:	4a13      	ldr	r2, [pc, #76]	; (800205c <DMA_CalcBaseAndBitshift+0x68>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d909      	bls.n	8002036 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	1d1a      	adds	r2, r3, #4
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	659a      	str	r2, [r3, #88]	; 0x58
 8002034:	e007      	b.n	8002046 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800203e:	f023 0303 	bic.w	r3, r3, #3
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	aaaaaaab 	.word	0xaaaaaaab
 800205c:	08005208 	.word	0x08005208

08002060 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d11f      	bne.n	80020ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d856      	bhi.n	800212e <DMA_CheckFifoParam+0xce>
 8002080:	a201      	add	r2, pc, #4	; (adr r2, 8002088 <DMA_CheckFifoParam+0x28>)
 8002082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002086:	bf00      	nop
 8002088:	08002099 	.word	0x08002099
 800208c:	080020ab 	.word	0x080020ab
 8002090:	08002099 	.word	0x08002099
 8002094:	0800212f 	.word	0x0800212f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d046      	beq.n	8002132 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a8:	e043      	b.n	8002132 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020b2:	d140      	bne.n	8002136 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b8:	e03d      	b.n	8002136 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c2:	d121      	bne.n	8002108 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d837      	bhi.n	800213a <DMA_CheckFifoParam+0xda>
 80020ca:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <DMA_CheckFifoParam+0x70>)
 80020cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d0:	080020e1 	.word	0x080020e1
 80020d4:	080020e7 	.word	0x080020e7
 80020d8:	080020e1 	.word	0x080020e1
 80020dc:	080020f9 	.word	0x080020f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
      break;
 80020e4:	e030      	b.n	8002148 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d025      	beq.n	800213e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f6:	e022      	b.n	800213e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002100:	d11f      	bne.n	8002142 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002106:	e01c      	b.n	8002142 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d903      	bls.n	8002116 <DMA_CheckFifoParam+0xb6>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d003      	beq.n	800211c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002114:	e018      	b.n	8002148 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
      break;
 800211a:	e015      	b.n	8002148 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00e      	beq.n	8002146 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      break;
 800212c:	e00b      	b.n	8002146 <DMA_CheckFifoParam+0xe6>
      break;
 800212e:	bf00      	nop
 8002130:	e00a      	b.n	8002148 <DMA_CheckFifoParam+0xe8>
      break;
 8002132:	bf00      	nop
 8002134:	e008      	b.n	8002148 <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
 8002138:	e006      	b.n	8002148 <DMA_CheckFifoParam+0xe8>
      break;
 800213a:	bf00      	nop
 800213c:	e004      	b.n	8002148 <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
 8002140:	e002      	b.n	8002148 <DMA_CheckFifoParam+0xe8>
      break;   
 8002142:	bf00      	nop
 8002144:	e000      	b.n	8002148 <DMA_CheckFifoParam+0xe8>
      break;
 8002146:	bf00      	nop
    }
  } 
  
  return status; 
 8002148:	7bfb      	ldrb	r3, [r7, #15]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e177      	b.n	8002464 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	f040 8166 	bne.w	800245e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d005      	beq.n	80021aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d130      	bne.n	800220c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 0201 	and.w	r2, r3, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b03      	cmp	r3, #3
 8002216:	d017      	beq.n	8002248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d123      	bne.n	800229c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0203 	and.w	r2, r3, #3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80c0 	beq.w	800245e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b66      	ldr	r3, [pc, #408]	; (800247c <HAL_GPIO_Init+0x324>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a65      	ldr	r2, [pc, #404]	; (800247c <HAL_GPIO_Init+0x324>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b63      	ldr	r3, [pc, #396]	; (800247c <HAL_GPIO_Init+0x324>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fa:	4a61      	ldr	r2, [pc, #388]	; (8002480 <HAL_GPIO_Init+0x328>)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_GPIO_Init+0x32c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d037      	beq.n	8002396 <HAL_GPIO_Init+0x23e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a57      	ldr	r2, [pc, #348]	; (8002488 <HAL_GPIO_Init+0x330>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d031      	beq.n	8002392 <HAL_GPIO_Init+0x23a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a56      	ldr	r2, [pc, #344]	; (800248c <HAL_GPIO_Init+0x334>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02b      	beq.n	800238e <HAL_GPIO_Init+0x236>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a55      	ldr	r2, [pc, #340]	; (8002490 <HAL_GPIO_Init+0x338>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d025      	beq.n	800238a <HAL_GPIO_Init+0x232>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a54      	ldr	r2, [pc, #336]	; (8002494 <HAL_GPIO_Init+0x33c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01f      	beq.n	8002386 <HAL_GPIO_Init+0x22e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a53      	ldr	r2, [pc, #332]	; (8002498 <HAL_GPIO_Init+0x340>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d019      	beq.n	8002382 <HAL_GPIO_Init+0x22a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a52      	ldr	r2, [pc, #328]	; (800249c <HAL_GPIO_Init+0x344>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_GPIO_Init+0x226>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a51      	ldr	r2, [pc, #324]	; (80024a0 <HAL_GPIO_Init+0x348>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00d      	beq.n	800237a <HAL_GPIO_Init+0x222>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a50      	ldr	r2, [pc, #320]	; (80024a4 <HAL_GPIO_Init+0x34c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <HAL_GPIO_Init+0x21e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <HAL_GPIO_Init+0x350>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d101      	bne.n	8002372 <HAL_GPIO_Init+0x21a>
 800236e:	2309      	movs	r3, #9
 8002370:	e012      	b.n	8002398 <HAL_GPIO_Init+0x240>
 8002372:	230a      	movs	r3, #10
 8002374:	e010      	b.n	8002398 <HAL_GPIO_Init+0x240>
 8002376:	2308      	movs	r3, #8
 8002378:	e00e      	b.n	8002398 <HAL_GPIO_Init+0x240>
 800237a:	2307      	movs	r3, #7
 800237c:	e00c      	b.n	8002398 <HAL_GPIO_Init+0x240>
 800237e:	2306      	movs	r3, #6
 8002380:	e00a      	b.n	8002398 <HAL_GPIO_Init+0x240>
 8002382:	2305      	movs	r3, #5
 8002384:	e008      	b.n	8002398 <HAL_GPIO_Init+0x240>
 8002386:	2304      	movs	r3, #4
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x240>
 800238a:	2303      	movs	r3, #3
 800238c:	e004      	b.n	8002398 <HAL_GPIO_Init+0x240>
 800238e:	2302      	movs	r3, #2
 8002390:	e002      	b.n	8002398 <HAL_GPIO_Init+0x240>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_GPIO_Init+0x240>
 8002396:	2300      	movs	r3, #0
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f002 0203 	and.w	r2, r2, #3
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	4093      	lsls	r3, r2
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a8:	4935      	ldr	r1, [pc, #212]	; (8002480 <HAL_GPIO_Init+0x328>)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_GPIO_Init+0x354>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023da:	4a34      	ldr	r2, [pc, #208]	; (80024ac <HAL_GPIO_Init+0x354>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e0:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_GPIO_Init+0x354>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002404:	4a29      	ldr	r2, [pc, #164]	; (80024ac <HAL_GPIO_Init+0x354>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800240a:	4b28      	ldr	r3, [pc, #160]	; (80024ac <HAL_GPIO_Init+0x354>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800242e:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_GPIO_Init+0x354>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_GPIO_Init+0x354>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <HAL_GPIO_Init+0x354>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3301      	adds	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b0f      	cmp	r3, #15
 8002468:	f67f ae84 	bls.w	8002174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40013800 	.word	0x40013800
 8002484:	40020000 	.word	0x40020000
 8002488:	40020400 	.word	0x40020400
 800248c:	40020800 	.word	0x40020800
 8002490:	40020c00 	.word	0x40020c00
 8002494:	40021000 	.word	0x40021000
 8002498:	40021400 	.word	0x40021400
 800249c:	40021800 	.word	0x40021800
 80024a0:	40021c00 	.word	0x40021c00
 80024a4:	40022000 	.word	0x40022000
 80024a8:	40022400 	.word	0x40022400
 80024ac:	40013c00 	.word	0x40013c00

080024b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0cc      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b68      	ldr	r3, [pc, #416]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d90c      	bls.n	80024ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0b8      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002504:	4b59      	ldr	r3, [pc, #356]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800250e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800251c:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002528:	4b50      	ldr	r3, [pc, #320]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	494d      	ldr	r1, [pc, #308]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d044      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d119      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e07f      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d003      	beq.n	800256e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256a:	2b03      	cmp	r3, #3
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	4b3f      	ldr	r3, [pc, #252]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e06f      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e067      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b37      	ldr	r3, [pc, #220]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f023 0203 	bic.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4934      	ldr	r1, [pc, #208]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a0:	f7ff f906 	bl	80017b0 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	e00a      	b.n	80025be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7ff f902 	bl	80017b0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e04f      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1eb      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d20c      	bcs.n	80025f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e032      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4916      	ldr	r1, [pc, #88]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	490e      	ldr	r1, [pc, #56]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002636:	f000 f821 	bl	800267c <HAL_RCC_GetSysClockFreq>
 800263a:	4602      	mov	r2, r0
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	490a      	ldr	r1, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	5ccb      	ldrb	r3, [r1, r3]
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f866 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023c00 	.word	0x40023c00
 800266c:	40023800 	.word	0x40023800
 8002670:	080051f8 	.word	0x080051f8
 8002674:	20000000 	.word	0x20000000
 8002678:	20000004 	.word	0x20000004

0800267c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800267c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002680:	b090      	sub	sp, #64	; 0x40
 8002682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
 8002688:	2300      	movs	r3, #0
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800268c:	2300      	movs	r3, #0
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002694:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d00d      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x40>
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	f200 80a1 	bhi.w	80027e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x34>
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ae:	e09b      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_GetSysClockFreq+0x184>)
 80026b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026b4:	e09b      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b6:	4b53      	ldr	r3, [pc, #332]	; (8002804 <HAL_RCC_GetSysClockFreq+0x188>)
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026ba:	e098      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026bc:	4b4f      	ldr	r3, [pc, #316]	; (80027fc <HAL_RCC_GetSysClockFreq+0x180>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c6:	4b4d      	ldr	r3, [pc, #308]	; (80027fc <HAL_RCC_GetSysClockFreq+0x180>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d028      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d2:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <HAL_RCC_GetSysClockFreq+0x180>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	099b      	lsrs	r3, r3, #6
 80026d8:	2200      	movs	r2, #0
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	627a      	str	r2, [r7, #36]	; 0x24
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026e4:	2100      	movs	r1, #0
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_GetSysClockFreq+0x188>)
 80026e8:	fb03 f201 	mul.w	r2, r3, r1
 80026ec:	2300      	movs	r3, #0
 80026ee:	fb00 f303 	mul.w	r3, r0, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	4a43      	ldr	r2, [pc, #268]	; (8002804 <HAL_RCC_GetSysClockFreq+0x188>)
 80026f6:	fba0 1202 	umull	r1, r2, r0, r2
 80026fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026fc:	460a      	mov	r2, r1
 80026fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002702:	4413      	add	r3, r2
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	2200      	movs	r2, #0
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	61fa      	str	r2, [r7, #28]
 800270e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002716:	f7fe fa5d 	bl	8000bd4 <__aeabi_uldivmod>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4613      	mov	r3, r2
 8002720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002722:	e053      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002724:	4b35      	ldr	r3, [pc, #212]	; (80027fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	099b      	lsrs	r3, r3, #6
 800272a:	2200      	movs	r2, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	617a      	str	r2, [r7, #20]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002736:	f04f 0b00 	mov.w	fp, #0
 800273a:	4652      	mov	r2, sl
 800273c:	465b      	mov	r3, fp
 800273e:	f04f 0000 	mov.w	r0, #0
 8002742:	f04f 0100 	mov.w	r1, #0
 8002746:	0159      	lsls	r1, r3, #5
 8002748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800274c:	0150      	lsls	r0, r2, #5
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	ebb2 080a 	subs.w	r8, r2, sl
 8002756:	eb63 090b 	sbc.w	r9, r3, fp
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800276a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800276e:	ebb2 0408 	subs.w	r4, r2, r8
 8002772:	eb63 0509 	sbc.w	r5, r3, r9
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	00eb      	lsls	r3, r5, #3
 8002780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002784:	00e2      	lsls	r2, r4, #3
 8002786:	4614      	mov	r4, r2
 8002788:	461d      	mov	r5, r3
 800278a:	eb14 030a 	adds.w	r3, r4, sl
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	eb45 030b 	adc.w	r3, r5, fp
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027a2:	4629      	mov	r1, r5
 80027a4:	028b      	lsls	r3, r1, #10
 80027a6:	4621      	mov	r1, r4
 80027a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027ac:	4621      	mov	r1, r4
 80027ae:	028a      	lsls	r2, r1, #10
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	2200      	movs	r2, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	60fa      	str	r2, [r7, #12]
 80027bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c0:	f7fe fa08 	bl	8000bd4 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4613      	mov	r3, r2
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_GetSysClockFreq+0x180>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80027dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027e6:	e002      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetSysClockFreq+0x184>)
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3740      	adds	r7, #64	; 0x40
 80027f4:	46bd      	mov	sp, r7
 80027f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	00f42400 	.word	0x00f42400
 8002804:	017d7840 	.word	0x017d7840

08002808 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e273      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d075      	beq.n	8002912 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002826:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d00c      	beq.n	800284c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002832:	4b85      	ldr	r3, [pc, #532]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800283a:	2b08      	cmp	r3, #8
 800283c:	d112      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d05b      	beq.n	8002910 <HAL_RCC_OscConfig+0x108>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d157      	bne.n	8002910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e24e      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x74>
 800286e:	4b76      	ldr	r3, [pc, #472]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a75      	ldr	r2, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6f      	ldr	r2, [pc, #444]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6c      	ldr	r2, [pc, #432]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 80028a0:	4b69      	ldr	r3, [pc, #420]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a68      	ldr	r2, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe ff76 	bl	80017b0 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c8:	f7fe ff72 	bl	80017b0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e213      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b5b      	ldr	r3, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xc0>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe ff62 	bl	80017b0 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fe ff5e 	bl	80017b0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1ff      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0xe8>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d063      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800291e:	4b4a      	ldr	r3, [pc, #296]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002932:	2b08      	cmp	r3, #8
 8002934:	d11c      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b44      	ldr	r3, [pc, #272]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e1d3      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4937      	ldr	r1, [pc, #220]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	e03a      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <HAL_RCC_OscConfig+0x244>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe ff17 	bl	80017b0 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002986:	f7fe ff13 	bl	80017b0 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e1b4      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4925      	ldr	r1, [pc, #148]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCC_OscConfig+0x244>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fef6 	bl	80017b0 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c8:	f7fe fef2 	bl	80017b0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e193      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d036      	beq.n	8002a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_RCC_OscConfig+0x248>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fed6 	bl	80017b0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fed2 	bl	80017b0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e173      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x200>
 8002a26:	e01b      	b.n	8002a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x248>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7fe febf 	bl	80017b0 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	e00e      	b.n	8002a54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a36:	f7fe febb 	bl	80017b0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d907      	bls.n	8002a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e15c      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	42470000 	.word	0x42470000
 8002a50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	4b8a      	ldr	r3, [pc, #552]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ea      	bne.n	8002a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8097 	beq.w	8002b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b7f      	ldr	r3, [pc, #508]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a7e      	ldr	r2, [pc, #504]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8e:	4b7c      	ldr	r3, [pc, #496]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b79      	ldr	r3, [pc, #484]	; (8002c84 <HAL_RCC_OscConfig+0x47c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x47c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	; (8002c84 <HAL_RCC_OscConfig+0x47c>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fe7b 	bl	80017b0 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fe fe77 	bl	80017b0 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e118      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x47c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2ea>
 8002ae4:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a65      	ldr	r2, [pc, #404]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x324>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x30c>
 8002afa:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a60      	ldr	r2, [pc, #384]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
 8002b06:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a5d      	ldr	r2, [pc, #372]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x324>
 8002b14:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a59      	ldr	r2, [pc, #356]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a56      	ldr	r2, [pc, #344]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe fe3c 	bl	80017b0 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fe38 	bl	80017b0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0d7      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ee      	beq.n	8002b3c <HAL_RCC_OscConfig+0x334>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe fe26 	bl	80017b0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fe22 	bl	80017b0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0c1      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7e:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ee      	bne.n	8002b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	4a3a      	ldr	r2, [pc, #232]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80ad 	beq.w	8002d00 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d060      	beq.n	8002c74 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d145      	bne.n	8002c46 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <HAL_RCC_OscConfig+0x480>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fdf6 	bl	80017b0 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe fdf2 	bl	80017b0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e093      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	019b      	lsls	r3, r3, #6
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	071b      	lsls	r3, r3, #28
 8002c12:	491b      	ldr	r1, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_RCC_OscConfig+0x480>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fdc7 	bl	80017b0 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c26:	f7fe fdc3 	bl	80017b0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e064      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x41e>
 8002c44:	e05c      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCC_OscConfig+0x480>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fdb0 	bl	80017b0 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe fdac 	bl	80017b0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e04d      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x44c>
 8002c72:	e045      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e040      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40007000 	.word	0x40007000
 8002c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d030      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d129      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d122      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d119      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d10f      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fbd6 	bl	80014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fd8e 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e041      	b.n	8002e44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f839 	bl	8002e4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f000 fd3f 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e022      	b.n	8002ed2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d109      	bne.n	8002ea6 <HAL_TIM_PWM_Start_DMA+0x46>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	e015      	b.n	8002ed2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d109      	bne.n	8002ec0 <HAL_TIM_PWM_Start_DMA+0x60>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e008      	b.n	8002ed2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e171      	b.n	80031be <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_TIM_PWM_Start_DMA+0x94>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e022      	b.n	8002f3a <HAL_TIM_PWM_Start_DMA+0xda>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d109      	bne.n	8002f0e <HAL_TIM_PWM_Start_DMA+0xae>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e015      	b.n	8002f3a <HAL_TIM_PWM_Start_DMA+0xda>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d109      	bne.n	8002f28 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e008      	b.n	8002f3a <HAL_TIM_PWM_Start_DMA+0xda>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d024      	beq.n	8002f88 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <HAL_TIM_PWM_Start_DMA+0xee>
 8002f44:	887b      	ldrh	r3, [r7, #2]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e137      	b.n	80031be <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <HAL_TIM_PWM_Start_DMA+0xfe>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f5c:	e016      	b.n	8002f8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d104      	bne.n	8002f6e <HAL_TIM_PWM_Start_DMA+0x10e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f6c:	e00e      	b.n	8002f8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_PWM_Start_DMA+0x11e>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f7c:	e006      	b.n	8002f8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f86:	e001      	b.n	8002f8c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e118      	b.n	80031be <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	f200 80ae 	bhi.w	80030f0 <HAL_TIM_PWM_Start_DMA+0x290>
 8002f94:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fd1 	.word	0x08002fd1
 8002fa0:	080030f1 	.word	0x080030f1
 8002fa4:	080030f1 	.word	0x080030f1
 8002fa8:	080030f1 	.word	0x080030f1
 8002fac:	08003019 	.word	0x08003019
 8002fb0:	080030f1 	.word	0x080030f1
 8002fb4:	080030f1 	.word	0x080030f1
 8002fb8:	080030f1 	.word	0x080030f1
 8002fbc:	08003061 	.word	0x08003061
 8002fc0:	080030f1 	.word	0x080030f1
 8002fc4:	080030f1 	.word	0x080030f1
 8002fc8:	080030f1 	.word	0x080030f1
 8002fcc:	080030a9 	.word	0x080030a9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	4a7c      	ldr	r2, [pc, #496]	; (80031c8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002fd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	4a7b      	ldr	r2, [pc, #492]	; (80031cc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	4a7a      	ldr	r2, [pc, #488]	; (80031d0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002fe6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3334      	adds	r3, #52	; 0x34
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	f7fe fdca 	bl	8001b90 <HAL_DMA_Start_IT>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0db      	b.n	80031be <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003014:	60da      	str	r2, [r3, #12]
      break;
 8003016:	e06e      	b.n	80030f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	4a6a      	ldr	r2, [pc, #424]	; (80031c8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800301e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	4a69      	ldr	r2, [pc, #420]	; (80031cc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	4a68      	ldr	r2, [pc, #416]	; (80031d0 <HAL_TIM_PWM_Start_DMA+0x370>)
 800302e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3338      	adds	r3, #56	; 0x38
 800303c:	461a      	mov	r2, r3
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	f7fe fda6 	bl	8001b90 <HAL_DMA_Start_IT>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0b7      	b.n	80031be <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800305c:	60da      	str	r2, [r3, #12]
      break;
 800305e:	e04a      	b.n	80030f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	4a58      	ldr	r2, [pc, #352]	; (80031c8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	4a57      	ldr	r2, [pc, #348]	; (80031cc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	4a56      	ldr	r2, [pc, #344]	; (80031d0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003076:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	333c      	adds	r3, #60	; 0x3c
 8003084:	461a      	mov	r2, r3
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	f7fe fd82 	bl	8001b90 <HAL_DMA_Start_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e093      	b.n	80031be <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a4:	60da      	str	r2, [r3, #12]
      break;
 80030a6:	e026      	b.n	80030f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	4a46      	ldr	r2, [pc, #280]	; (80031c8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80030ae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	4a45      	ldr	r2, [pc, #276]	; (80031cc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	4a44      	ldr	r2, [pc, #272]	; (80031d0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80030be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3340      	adds	r3, #64	; 0x40
 80030cc:	461a      	mov	r2, r3
 80030ce:	887b      	ldrh	r3, [r7, #2]
 80030d0:	f7fe fd5e 	bl	8001b90 <HAL_DMA_Start_IT>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06f      	b.n	80031be <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ec:	60da      	str	r2, [r3, #12]
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	75fb      	strb	r3, [r7, #23]
      break;
 80030f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d15f      	bne.n	80031bc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2201      	movs	r2, #1
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fe9d 	bl	8003e44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_TIM_PWM_Start_DMA+0x2be>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2f      	ldr	r2, [pc, #188]	; (80031d8 <HAL_TIM_PWM_Start_DMA+0x378>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003122:	2300      	movs	r3, #0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <HAL_TIM_PWM_Start_DMA+0x374>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d022      	beq.n	8003188 <HAL_TIM_PWM_Start_DMA+0x328>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d01d      	beq.n	8003188 <HAL_TIM_PWM_Start_DMA+0x328>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a22      	ldr	r2, [pc, #136]	; (80031dc <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d018      	beq.n	8003188 <HAL_TIM_PWM_Start_DMA+0x328>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <HAL_TIM_PWM_Start_DMA+0x380>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_TIM_PWM_Start_DMA+0x328>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00e      	beq.n	8003188 <HAL_TIM_PWM_Start_DMA+0x328>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1a      	ldr	r2, [pc, #104]	; (80031d8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d009      	beq.n	8003188 <HAL_TIM_PWM_Start_DMA+0x328>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_TIM_PWM_Start_DMA+0x388>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_TIM_PWM_Start_DMA+0x328>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1a      	ldr	r2, [pc, #104]	; (80031ec <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d111      	bne.n	80031ac <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b06      	cmp	r3, #6
 8003198:	d010      	beq.n	80031bc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031aa:	e007      	b.n	80031bc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	08003761 	.word	0x08003761
 80031cc:	08003809 	.word	0x08003809
 80031d0:	080036cf 	.word	0x080036cf
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40010400 	.word	0x40010400
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800
 80031e4:	40000c00 	.word	0x40000c00
 80031e8:	40014000 	.word	0x40014000
 80031ec:	40001800 	.word	0x40001800

080031f0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d855      	bhi.n	80032b0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003204:	a201      	add	r2, pc, #4	; (adr r2, 800320c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	08003241 	.word	0x08003241
 8003210:	080032b1 	.word	0x080032b1
 8003214:	080032b1 	.word	0x080032b1
 8003218:	080032b1 	.word	0x080032b1
 800321c:	0800325d 	.word	0x0800325d
 8003220:	080032b1 	.word	0x080032b1
 8003224:	080032b1 	.word	0x080032b1
 8003228:	080032b1 	.word	0x080032b1
 800322c:	08003279 	.word	0x08003279
 8003230:	080032b1 	.word	0x080032b1
 8003234:	080032b1 	.word	0x080032b1
 8003238:	080032b1 	.word	0x080032b1
 800323c:	08003295 	.word	0x08003295
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800324e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fcf3 	bl	8001c40 <HAL_DMA_Abort_IT>
      break;
 800325a:	e02c      	b.n	80032b6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fce5 	bl	8001c40 <HAL_DMA_Abort_IT>
      break;
 8003276:	e01e      	b.n	80032b6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003286:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fcd7 	bl	8001c40 <HAL_DMA_Abort_IT>
      break;
 8003292:	e010      	b.n	80032b6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe fcc9 	bl	8001c40 <HAL_DMA_Abort_IT>
      break;
 80032ae:	e002      	b.n	80032b6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      break;
 80032b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d161      	bne.n	8003380 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2200      	movs	r2, #0
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fdbd 	bl	8003e44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2f      	ldr	r2, [pc, #188]	; (800338c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_TIM_PWM_Stop_DMA+0xee>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a1a      	ldr	r2, [r3, #32]
 80032ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10f      	bne.n	8003318 <HAL_TIM_PWM_Stop_DMA+0x128>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6a1a      	ldr	r2, [r3, #32]
 80032fe:	f240 4344 	movw	r3, #1092	; 0x444
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10f      	bne.n	8003348 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a1a      	ldr	r2, [r3, #32]
 800332e:	f240 4344 	movw	r3, #1092	; 0x444
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d104      	bne.n	8003358 <HAL_TIM_PWM_Stop_DMA+0x168>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003356:	e013      	b.n	8003380 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b04      	cmp	r3, #4
 800335c:	d104      	bne.n	8003368 <HAL_TIM_PWM_Stop_DMA+0x178>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003366:	e00b      	b.n	8003380 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d104      	bne.n	8003378 <HAL_TIM_PWM_Stop_DMA+0x188>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003376:	e003      	b.n	8003380 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40010000 	.word	0x40010000
 8003390:	40010400 	.word	0x40010400

08003394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0ae      	b.n	8003510 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	f200 809f 	bhi.w	8003500 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033c2:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033fd 	.word	0x080033fd
 80033cc:	08003501 	.word	0x08003501
 80033d0:	08003501 	.word	0x08003501
 80033d4:	08003501 	.word	0x08003501
 80033d8:	0800343d 	.word	0x0800343d
 80033dc:	08003501 	.word	0x08003501
 80033e0:	08003501 	.word	0x08003501
 80033e4:	08003501 	.word	0x08003501
 80033e8:	0800347f 	.word	0x0800347f
 80033ec:	08003501 	.word	0x08003501
 80033f0:	08003501 	.word	0x08003501
 80033f4:	08003501 	.word	0x08003501
 80033f8:	080034bf 	.word	0x080034bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fad4 	bl	80039b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0208 	orr.w	r2, r2, #8
 8003416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0204 	bic.w	r2, r2, #4
 8003426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6999      	ldr	r1, [r3, #24]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	619a      	str	r2, [r3, #24]
      break;
 800343a:	e064      	b.n	8003506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fb24 	bl	8003a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6999      	ldr	r1, [r3, #24]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	021a      	lsls	r2, r3, #8
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	619a      	str	r2, [r3, #24]
      break;
 800347c:	e043      	b.n	8003506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fb79 	bl	8003b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0208 	orr.w	r2, r2, #8
 8003498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0204 	bic.w	r2, r2, #4
 80034a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69d9      	ldr	r1, [r3, #28]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	61da      	str	r2, [r3, #28]
      break;
 80034bc:	e023      	b.n	8003506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fbcd 	bl	8003c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69d9      	ldr	r1, [r3, #28]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	021a      	lsls	r2, r3, #8
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	61da      	str	r2, [r3, #28]
      break;
 80034fe:	e002      	b.n	8003506 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	75fb      	strb	r3, [r7, #23]
      break;
 8003504:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIM_ConfigClockSource+0x1c>
 8003530:	2302      	movs	r3, #2
 8003532:	e0b4      	b.n	800369e <HAL_TIM_ConfigClockSource+0x186>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800355a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356c:	d03e      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0xd4>
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	f200 8087 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	f000 8086 	beq.w	800368a <HAL_TIM_ConfigClockSource+0x172>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d87f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b70      	cmp	r3, #112	; 0x70
 8003586:	d01a      	beq.n	80035be <HAL_TIM_ConfigClockSource+0xa6>
 8003588:	2b70      	cmp	r3, #112	; 0x70
 800358a:	d87b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b60      	cmp	r3, #96	; 0x60
 800358e:	d050      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x11a>
 8003590:	2b60      	cmp	r3, #96	; 0x60
 8003592:	d877      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b50      	cmp	r3, #80	; 0x50
 8003596:	d03c      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xfa>
 8003598:	2b50      	cmp	r3, #80	; 0x50
 800359a:	d873      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d058      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x13a>
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d86f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d064      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d86b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d060      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d867      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05c      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d05a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035bc:	e062      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f000 fc19 	bl	8003e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	609a      	str	r2, [r3, #8]
      break;
 80035ea:	e04f      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f000 fc02 	bl	8003e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e03c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	f000 fb76 	bl	8003d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2150      	movs	r1, #80	; 0x50
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fbcf 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003630:	e02c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	461a      	mov	r2, r3
 8003640:	f000 fb95 	bl	8003d6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2160      	movs	r1, #96	; 0x60
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fbbf 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003650:	e01c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	461a      	mov	r2, r3
 8003660:	f000 fb56 	bl	8003d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fbaf 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003670:	e00c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 fba6 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003682:	e003      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e000      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800368a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d107      	bne.n	80036f6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f4:	e02a      	b.n	800374c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d107      	bne.n	8003710 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2202      	movs	r2, #2
 8003704:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370e:	e01d      	b.n	800374c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d107      	bne.n	800372a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2204      	movs	r2, #4
 800371e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003728:	e010      	b.n	800374c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	d107      	bne.n	8003744 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2208      	movs	r2, #8
 8003738:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003742:	e003      	b.n	800374c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff ffb4 	bl	80036ba <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d10b      	bne.n	8003790 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d136      	bne.n	80037f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800378e:	e031      	b.n	80037f4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d10b      	bne.n	80037b2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2202      	movs	r2, #2
 800379e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d125      	bne.n	80037f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b0:	e020      	b.n	80037f4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d10b      	bne.n	80037d4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2204      	movs	r2, #4
 80037c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d114      	bne.n	80037f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d2:	e00f      	b.n	80037f4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10a      	bne.n	80037f4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2208      	movs	r2, #8
 80037e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7fd fb6f 	bl	8000ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d103      	bne.n	8003828 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	771a      	strb	r2, [r3, #28]
 8003826:	e019      	b.n	800385c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d103      	bne.n	800383a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2202      	movs	r2, #2
 8003836:	771a      	strb	r2, [r3, #28]
 8003838:	e010      	b.n	800385c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d103      	bne.n	800384c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2204      	movs	r2, #4
 8003848:	771a      	strb	r2, [r3, #28]
 800384a:	e007      	b.n	800385c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d102      	bne.n	800385c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2208      	movs	r2, #8
 800385a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff ff22 	bl	80036a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a40      	ldr	r2, [pc, #256]	; (8003984 <TIM_Base_SetConfig+0x114>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d00f      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3d      	ldr	r2, [pc, #244]	; (8003988 <TIM_Base_SetConfig+0x118>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3c      	ldr	r2, [pc, #240]	; (800398c <TIM_Base_SetConfig+0x11c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3b      	ldr	r2, [pc, #236]	; (8003990 <TIM_Base_SetConfig+0x120>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <TIM_Base_SetConfig+0x124>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <TIM_Base_SetConfig+0x114>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02b      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d027      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2c      	ldr	r2, [pc, #176]	; (8003988 <TIM_Base_SetConfig+0x118>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d023      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2b      	ldr	r2, [pc, #172]	; (800398c <TIM_Base_SetConfig+0x11c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01f      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <TIM_Base_SetConfig+0x120>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01b      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <TIM_Base_SetConfig+0x124>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d017      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a28      	ldr	r2, [pc, #160]	; (8003998 <TIM_Base_SetConfig+0x128>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <TIM_Base_SetConfig+0x12c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <TIM_Base_SetConfig+0x130>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <TIM_Base_SetConfig+0x134>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <TIM_Base_SetConfig+0x138>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a23      	ldr	r2, [pc, #140]	; (80039ac <TIM_Base_SetConfig+0x13c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <TIM_Base_SetConfig+0x114>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0xf8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <TIM_Base_SetConfig+0x124>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d103      	bne.n	8003970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	615a      	str	r2, [r3, #20]
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40010000 	.word	0x40010000
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40010400 	.word	0x40010400
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800
 80039a4:	40001800 	.word	0x40001800
 80039a8:	40001c00 	.word	0x40001c00
 80039ac:	40002000 	.word	0x40002000

080039b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f023 0302 	bic.w	r3, r3, #2
 80039f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <TIM_OC1_SetConfig+0xd8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_OC1_SetConfig+0x64>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <TIM_OC1_SetConfig+0xdc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10c      	bne.n	8003a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0308 	bic.w	r3, r3, #8
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <TIM_OC1_SetConfig+0xd8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_OC1_SetConfig+0x8e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <TIM_OC1_SetConfig+0xdc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d111      	bne.n	8003a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	621a      	str	r2, [r3, #32]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010400 	.word	0x40010400

08003a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0210 	bic.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0320 	bic.w	r3, r3, #32
 8003ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <TIM_OC2_SetConfig+0xe4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_OC2_SetConfig+0x68>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <TIM_OC2_SetConfig+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d10d      	bne.n	8003b14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <TIM_OC2_SetConfig+0xe4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_OC2_SetConfig+0x94>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <TIM_OC2_SetConfig+0xe8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d113      	bne.n	8003b4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40010400 	.word	0x40010400

08003b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <TIM_OC3_SetConfig+0xe0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_OC3_SetConfig+0x66>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <TIM_OC3_SetConfig+0xe4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10d      	bne.n	8003bfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <TIM_OC3_SetConfig+0xe0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d003      	beq.n	8003c0e <TIM_OC3_SetConfig+0x92>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <TIM_OC3_SetConfig+0xe4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d113      	bne.n	8003c36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	40010400 	.word	0x40010400

08003c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	031b      	lsls	r3, r3, #12
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <TIM_OC4_SetConfig+0xa4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_OC4_SetConfig+0x68>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <TIM_OC4_SetConfig+0xa8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d109      	bne.n	8003ce0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40010400 	.word	0x40010400

08003d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0201 	bic.w	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 030a 	bic.w	r3, r3, #10
 8003d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f043 0307 	orr.w	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	609a      	str	r2, [r3, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2201      	movs	r2, #1
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a1a      	ldr	r2, [r3, #32]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	401a      	ands	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1a      	ldr	r2, [r3, #32]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e05a      	b.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d022      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d01d      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d018      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1a      	ldr	r2, [pc, #104]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d009      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d10c      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800
 8003f78:	40000c00 	.word	0x40000c00
 8003f7c:	40010400 	.word	0x40010400
 8003f80:	40014000 	.word	0x40014000
 8003f84:	40001800 	.word	0x40001800

08003f88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e03d      	b.n	8004020 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	0000      	movs	r0, r0
	...

08004030 <tan>:
 8004030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004032:	ec53 2b10 	vmov	r2, r3, d0
 8004036:	4816      	ldr	r0, [pc, #88]	; (8004090 <tan+0x60>)
 8004038:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800403c:	4281      	cmp	r1, r0
 800403e:	dc07      	bgt.n	8004050 <tan+0x20>
 8004040:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8004088 <tan+0x58>
 8004044:	2001      	movs	r0, #1
 8004046:	b005      	add	sp, #20
 8004048:	f85d eb04 	ldr.w	lr, [sp], #4
 800404c:	f000 bd80 	b.w	8004b50 <__kernel_tan>
 8004050:	4810      	ldr	r0, [pc, #64]	; (8004094 <tan+0x64>)
 8004052:	4281      	cmp	r1, r0
 8004054:	dd09      	ble.n	800406a <tan+0x3a>
 8004056:	ee10 0a10 	vmov	r0, s0
 800405a:	4619      	mov	r1, r3
 800405c:	f7fc f8d0 	bl	8000200 <__aeabi_dsub>
 8004060:	ec41 0b10 	vmov	d0, r0, r1
 8004064:	b005      	add	sp, #20
 8004066:	f85d fb04 	ldr.w	pc, [sp], #4
 800406a:	4668      	mov	r0, sp
 800406c:	f000 f814 	bl	8004098 <__ieee754_rem_pio2>
 8004070:	0040      	lsls	r0, r0, #1
 8004072:	f000 0002 	and.w	r0, r0, #2
 8004076:	ed9d 1b02 	vldr	d1, [sp, #8]
 800407a:	ed9d 0b00 	vldr	d0, [sp]
 800407e:	f1c0 0001 	rsb	r0, r0, #1
 8004082:	f000 fd65 	bl	8004b50 <__kernel_tan>
 8004086:	e7ed      	b.n	8004064 <tan+0x34>
	...
 8004090:	3fe921fb 	.word	0x3fe921fb
 8004094:	7fefffff 	.word	0x7fefffff

08004098 <__ieee754_rem_pio2>:
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	ed2d 8b02 	vpush	{d8}
 80040a0:	ec55 4b10 	vmov	r4, r5, d0
 80040a4:	4bca      	ldr	r3, [pc, #808]	; (80043d0 <__ieee754_rem_pio2+0x338>)
 80040a6:	b08b      	sub	sp, #44	; 0x2c
 80040a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80040ac:	4598      	cmp	r8, r3
 80040ae:	4682      	mov	sl, r0
 80040b0:	9502      	str	r5, [sp, #8]
 80040b2:	dc08      	bgt.n	80040c6 <__ieee754_rem_pio2+0x2e>
 80040b4:	2200      	movs	r2, #0
 80040b6:	2300      	movs	r3, #0
 80040b8:	ed80 0b00 	vstr	d0, [r0]
 80040bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80040c0:	f04f 0b00 	mov.w	fp, #0
 80040c4:	e028      	b.n	8004118 <__ieee754_rem_pio2+0x80>
 80040c6:	4bc3      	ldr	r3, [pc, #780]	; (80043d4 <__ieee754_rem_pio2+0x33c>)
 80040c8:	4598      	cmp	r8, r3
 80040ca:	dc78      	bgt.n	80041be <__ieee754_rem_pio2+0x126>
 80040cc:	9b02      	ldr	r3, [sp, #8]
 80040ce:	4ec2      	ldr	r6, [pc, #776]	; (80043d8 <__ieee754_rem_pio2+0x340>)
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	ee10 0a10 	vmov	r0, s0
 80040d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8004398 <__ieee754_rem_pio2+0x300>)
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	4629      	mov	r1, r5
 80040de:	dd39      	ble.n	8004154 <__ieee754_rem_pio2+0xbc>
 80040e0:	f7fc f88e 	bl	8000200 <__aeabi_dsub>
 80040e4:	45b0      	cmp	r8, r6
 80040e6:	4604      	mov	r4, r0
 80040e8:	460d      	mov	r5, r1
 80040ea:	d01b      	beq.n	8004124 <__ieee754_rem_pio2+0x8c>
 80040ec:	a3ac      	add	r3, pc, #688	; (adr r3, 80043a0 <__ieee754_rem_pio2+0x308>)
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f7fc f885 	bl	8000200 <__aeabi_dsub>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	e9ca 2300 	strd	r2, r3, [sl]
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc f87d 	bl	8000200 <__aeabi_dsub>
 8004106:	a3a6      	add	r3, pc, #664	; (adr r3, 80043a0 <__ieee754_rem_pio2+0x308>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc f878 	bl	8000200 <__aeabi_dsub>
 8004110:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004114:	f04f 0b01 	mov.w	fp, #1
 8004118:	4658      	mov	r0, fp
 800411a:	b00b      	add	sp, #44	; 0x2c
 800411c:	ecbd 8b02 	vpop	{d8}
 8004120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004124:	a3a0      	add	r3, pc, #640	; (adr r3, 80043a8 <__ieee754_rem_pio2+0x310>)
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	f7fc f869 	bl	8000200 <__aeabi_dsub>
 800412e:	a3a0      	add	r3, pc, #640	; (adr r3, 80043b0 <__ieee754_rem_pio2+0x318>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	4604      	mov	r4, r0
 8004136:	460d      	mov	r5, r1
 8004138:	f7fc f862 	bl	8000200 <__aeabi_dsub>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	e9ca 2300 	strd	r2, r3, [sl]
 8004144:	4620      	mov	r0, r4
 8004146:	4629      	mov	r1, r5
 8004148:	f7fc f85a 	bl	8000200 <__aeabi_dsub>
 800414c:	a398      	add	r3, pc, #608	; (adr r3, 80043b0 <__ieee754_rem_pio2+0x318>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	e7db      	b.n	800410c <__ieee754_rem_pio2+0x74>
 8004154:	f7fc f856 	bl	8000204 <__adddf3>
 8004158:	45b0      	cmp	r8, r6
 800415a:	4604      	mov	r4, r0
 800415c:	460d      	mov	r5, r1
 800415e:	d016      	beq.n	800418e <__ieee754_rem_pio2+0xf6>
 8004160:	a38f      	add	r3, pc, #572	; (adr r3, 80043a0 <__ieee754_rem_pio2+0x308>)
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f7fc f84d 	bl	8000204 <__adddf3>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	e9ca 2300 	strd	r2, r3, [sl]
 8004172:	4620      	mov	r0, r4
 8004174:	4629      	mov	r1, r5
 8004176:	f7fc f843 	bl	8000200 <__aeabi_dsub>
 800417a:	a389      	add	r3, pc, #548	; (adr r3, 80043a0 <__ieee754_rem_pio2+0x308>)
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	f7fc f840 	bl	8000204 <__adddf3>
 8004184:	f04f 3bff 	mov.w	fp, #4294967295
 8004188:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800418c:	e7c4      	b.n	8004118 <__ieee754_rem_pio2+0x80>
 800418e:	a386      	add	r3, pc, #536	; (adr r3, 80043a8 <__ieee754_rem_pio2+0x310>)
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f7fc f836 	bl	8000204 <__adddf3>
 8004198:	a385      	add	r3, pc, #532	; (adr r3, 80043b0 <__ieee754_rem_pio2+0x318>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	4604      	mov	r4, r0
 80041a0:	460d      	mov	r5, r1
 80041a2:	f7fc f82f 	bl	8000204 <__adddf3>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	e9ca 2300 	strd	r2, r3, [sl]
 80041ae:	4620      	mov	r0, r4
 80041b0:	4629      	mov	r1, r5
 80041b2:	f7fc f825 	bl	8000200 <__aeabi_dsub>
 80041b6:	a37e      	add	r3, pc, #504	; (adr r3, 80043b0 <__ieee754_rem_pio2+0x318>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	e7e0      	b.n	8004180 <__ieee754_rem_pio2+0xe8>
 80041be:	4b87      	ldr	r3, [pc, #540]	; (80043dc <__ieee754_rem_pio2+0x344>)
 80041c0:	4598      	cmp	r8, r3
 80041c2:	f300 80d9 	bgt.w	8004378 <__ieee754_rem_pio2+0x2e0>
 80041c6:	f000 fecd 	bl	8004f64 <fabs>
 80041ca:	ec55 4b10 	vmov	r4, r5, d0
 80041ce:	ee10 0a10 	vmov	r0, s0
 80041d2:	a379      	add	r3, pc, #484	; (adr r3, 80043b8 <__ieee754_rem_pio2+0x320>)
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	4629      	mov	r1, r5
 80041da:	f7fc f9c9 	bl	8000570 <__aeabi_dmul>
 80041de:	4b80      	ldr	r3, [pc, #512]	; (80043e0 <__ieee754_rem_pio2+0x348>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	f7fc f80f 	bl	8000204 <__adddf3>
 80041e6:	f7fc fc5d 	bl	8000aa4 <__aeabi_d2iz>
 80041ea:	4683      	mov	fp, r0
 80041ec:	f7fc f956 	bl	800049c <__aeabi_i2d>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	ec43 2b18 	vmov	d8, r2, r3
 80041f8:	a367      	add	r3, pc, #412	; (adr r3, 8004398 <__ieee754_rem_pio2+0x300>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f7fc f9b7 	bl	8000570 <__aeabi_dmul>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4620      	mov	r0, r4
 8004208:	4629      	mov	r1, r5
 800420a:	f7fb fff9 	bl	8000200 <__aeabi_dsub>
 800420e:	a364      	add	r3, pc, #400	; (adr r3, 80043a0 <__ieee754_rem_pio2+0x308>)
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	4606      	mov	r6, r0
 8004216:	460f      	mov	r7, r1
 8004218:	ec51 0b18 	vmov	r0, r1, d8
 800421c:	f7fc f9a8 	bl	8000570 <__aeabi_dmul>
 8004220:	f1bb 0f1f 	cmp.w	fp, #31
 8004224:	4604      	mov	r4, r0
 8004226:	460d      	mov	r5, r1
 8004228:	dc0d      	bgt.n	8004246 <__ieee754_rem_pio2+0x1ae>
 800422a:	4b6e      	ldr	r3, [pc, #440]	; (80043e4 <__ieee754_rem_pio2+0x34c>)
 800422c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004234:	4543      	cmp	r3, r8
 8004236:	d006      	beq.n	8004246 <__ieee754_rem_pio2+0x1ae>
 8004238:	4622      	mov	r2, r4
 800423a:	462b      	mov	r3, r5
 800423c:	4630      	mov	r0, r6
 800423e:	4639      	mov	r1, r7
 8004240:	f7fb ffde 	bl	8000200 <__aeabi_dsub>
 8004244:	e00f      	b.n	8004266 <__ieee754_rem_pio2+0x1ce>
 8004246:	462b      	mov	r3, r5
 8004248:	4622      	mov	r2, r4
 800424a:	4630      	mov	r0, r6
 800424c:	4639      	mov	r1, r7
 800424e:	f7fb ffd7 	bl	8000200 <__aeabi_dsub>
 8004252:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004256:	9303      	str	r3, [sp, #12]
 8004258:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800425c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004260:	f1b8 0f10 	cmp.w	r8, #16
 8004264:	dc02      	bgt.n	800426c <__ieee754_rem_pio2+0x1d4>
 8004266:	e9ca 0100 	strd	r0, r1, [sl]
 800426a:	e039      	b.n	80042e0 <__ieee754_rem_pio2+0x248>
 800426c:	a34e      	add	r3, pc, #312	; (adr r3, 80043a8 <__ieee754_rem_pio2+0x310>)
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	ec51 0b18 	vmov	r0, r1, d8
 8004276:	f7fc f97b 	bl	8000570 <__aeabi_dmul>
 800427a:	4604      	mov	r4, r0
 800427c:	460d      	mov	r5, r1
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4630      	mov	r0, r6
 8004284:	4639      	mov	r1, r7
 8004286:	f7fb ffbb 	bl	8000200 <__aeabi_dsub>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4680      	mov	r8, r0
 8004290:	4689      	mov	r9, r1
 8004292:	4630      	mov	r0, r6
 8004294:	4639      	mov	r1, r7
 8004296:	f7fb ffb3 	bl	8000200 <__aeabi_dsub>
 800429a:	4622      	mov	r2, r4
 800429c:	462b      	mov	r3, r5
 800429e:	f7fb ffaf 	bl	8000200 <__aeabi_dsub>
 80042a2:	a343      	add	r3, pc, #268	; (adr r3, 80043b0 <__ieee754_rem_pio2+0x318>)
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	4604      	mov	r4, r0
 80042aa:	460d      	mov	r5, r1
 80042ac:	ec51 0b18 	vmov	r0, r1, d8
 80042b0:	f7fc f95e 	bl	8000570 <__aeabi_dmul>
 80042b4:	4622      	mov	r2, r4
 80042b6:	462b      	mov	r3, r5
 80042b8:	f7fb ffa2 	bl	8000200 <__aeabi_dsub>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4604      	mov	r4, r0
 80042c2:	460d      	mov	r5, r1
 80042c4:	4640      	mov	r0, r8
 80042c6:	4649      	mov	r1, r9
 80042c8:	f7fb ff9a 	bl	8000200 <__aeabi_dsub>
 80042cc:	9a03      	ldr	r2, [sp, #12]
 80042ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b31      	cmp	r3, #49	; 0x31
 80042d6:	dc24      	bgt.n	8004322 <__ieee754_rem_pio2+0x28a>
 80042d8:	e9ca 0100 	strd	r0, r1, [sl]
 80042dc:	4646      	mov	r6, r8
 80042de:	464f      	mov	r7, r9
 80042e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80042e4:	4630      	mov	r0, r6
 80042e6:	4642      	mov	r2, r8
 80042e8:	464b      	mov	r3, r9
 80042ea:	4639      	mov	r1, r7
 80042ec:	f7fb ff88 	bl	8000200 <__aeabi_dsub>
 80042f0:	462b      	mov	r3, r5
 80042f2:	4622      	mov	r2, r4
 80042f4:	f7fb ff84 	bl	8000200 <__aeabi_dsub>
 80042f8:	9b02      	ldr	r3, [sp, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004300:	f6bf af0a 	bge.w	8004118 <__ieee754_rem_pio2+0x80>
 8004304:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004308:	f8ca 3004 	str.w	r3, [sl, #4]
 800430c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004310:	f8ca 8000 	str.w	r8, [sl]
 8004314:	f8ca 0008 	str.w	r0, [sl, #8]
 8004318:	f8ca 300c 	str.w	r3, [sl, #12]
 800431c:	f1cb 0b00 	rsb	fp, fp, #0
 8004320:	e6fa      	b.n	8004118 <__ieee754_rem_pio2+0x80>
 8004322:	a327      	add	r3, pc, #156	; (adr r3, 80043c0 <__ieee754_rem_pio2+0x328>)
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	ec51 0b18 	vmov	r0, r1, d8
 800432c:	f7fc f920 	bl	8000570 <__aeabi_dmul>
 8004330:	4604      	mov	r4, r0
 8004332:	460d      	mov	r5, r1
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4640      	mov	r0, r8
 800433a:	4649      	mov	r1, r9
 800433c:	f7fb ff60 	bl	8000200 <__aeabi_dsub>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4606      	mov	r6, r0
 8004346:	460f      	mov	r7, r1
 8004348:	4640      	mov	r0, r8
 800434a:	4649      	mov	r1, r9
 800434c:	f7fb ff58 	bl	8000200 <__aeabi_dsub>
 8004350:	4622      	mov	r2, r4
 8004352:	462b      	mov	r3, r5
 8004354:	f7fb ff54 	bl	8000200 <__aeabi_dsub>
 8004358:	a31b      	add	r3, pc, #108	; (adr r3, 80043c8 <__ieee754_rem_pio2+0x330>)
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	4604      	mov	r4, r0
 8004360:	460d      	mov	r5, r1
 8004362:	ec51 0b18 	vmov	r0, r1, d8
 8004366:	f7fc f903 	bl	8000570 <__aeabi_dmul>
 800436a:	4622      	mov	r2, r4
 800436c:	462b      	mov	r3, r5
 800436e:	f7fb ff47 	bl	8000200 <__aeabi_dsub>
 8004372:	4604      	mov	r4, r0
 8004374:	460d      	mov	r5, r1
 8004376:	e75f      	b.n	8004238 <__ieee754_rem_pio2+0x1a0>
 8004378:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <__ieee754_rem_pio2+0x350>)
 800437a:	4598      	cmp	r8, r3
 800437c:	dd36      	ble.n	80043ec <__ieee754_rem_pio2+0x354>
 800437e:	ee10 2a10 	vmov	r2, s0
 8004382:	462b      	mov	r3, r5
 8004384:	4620      	mov	r0, r4
 8004386:	4629      	mov	r1, r5
 8004388:	f7fb ff3a 	bl	8000200 <__aeabi_dsub>
 800438c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004390:	e9ca 0100 	strd	r0, r1, [sl]
 8004394:	e694      	b.n	80040c0 <__ieee754_rem_pio2+0x28>
 8004396:	bf00      	nop
 8004398:	54400000 	.word	0x54400000
 800439c:	3ff921fb 	.word	0x3ff921fb
 80043a0:	1a626331 	.word	0x1a626331
 80043a4:	3dd0b461 	.word	0x3dd0b461
 80043a8:	1a600000 	.word	0x1a600000
 80043ac:	3dd0b461 	.word	0x3dd0b461
 80043b0:	2e037073 	.word	0x2e037073
 80043b4:	3ba3198a 	.word	0x3ba3198a
 80043b8:	6dc9c883 	.word	0x6dc9c883
 80043bc:	3fe45f30 	.word	0x3fe45f30
 80043c0:	2e000000 	.word	0x2e000000
 80043c4:	3ba3198a 	.word	0x3ba3198a
 80043c8:	252049c1 	.word	0x252049c1
 80043cc:	397b839a 	.word	0x397b839a
 80043d0:	3fe921fb 	.word	0x3fe921fb
 80043d4:	4002d97b 	.word	0x4002d97b
 80043d8:	3ff921fb 	.word	0x3ff921fb
 80043dc:	413921fb 	.word	0x413921fb
 80043e0:	3fe00000 	.word	0x3fe00000
 80043e4:	08005210 	.word	0x08005210
 80043e8:	7fefffff 	.word	0x7fefffff
 80043ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 80043f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80043f4:	ee10 0a10 	vmov	r0, s0
 80043f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80043fc:	ee10 6a10 	vmov	r6, s0
 8004400:	460f      	mov	r7, r1
 8004402:	f7fc fb4f 	bl	8000aa4 <__aeabi_d2iz>
 8004406:	f7fc f849 	bl	800049c <__aeabi_i2d>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4630      	mov	r0, r6
 8004410:	4639      	mov	r1, r7
 8004412:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004416:	f7fb fef3 	bl	8000200 <__aeabi_dsub>
 800441a:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <__ieee754_rem_pio2+0x410>)
 800441c:	2200      	movs	r2, #0
 800441e:	f7fc f8a7 	bl	8000570 <__aeabi_dmul>
 8004422:	460f      	mov	r7, r1
 8004424:	4606      	mov	r6, r0
 8004426:	f7fc fb3d 	bl	8000aa4 <__aeabi_d2iz>
 800442a:	f7fc f837 	bl	800049c <__aeabi_i2d>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4630      	mov	r0, r6
 8004434:	4639      	mov	r1, r7
 8004436:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800443a:	f7fb fee1 	bl	8000200 <__aeabi_dsub>
 800443e:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <__ieee754_rem_pio2+0x410>)
 8004440:	2200      	movs	r2, #0
 8004442:	f7fc f895 	bl	8000570 <__aeabi_dmul>
 8004446:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800444a:	ad04      	add	r5, sp, #16
 800444c:	f04f 0803 	mov.w	r8, #3
 8004450:	46a9      	mov	r9, r5
 8004452:	2600      	movs	r6, #0
 8004454:	2700      	movs	r7, #0
 8004456:	4632      	mov	r2, r6
 8004458:	463b      	mov	r3, r7
 800445a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800445e:	46c3      	mov	fp, r8
 8004460:	3d08      	subs	r5, #8
 8004462:	f108 38ff 	add.w	r8, r8, #4294967295
 8004466:	f7fc faeb 	bl	8000a40 <__aeabi_dcmpeq>
 800446a:	2800      	cmp	r0, #0
 800446c:	d1f3      	bne.n	8004456 <__ieee754_rem_pio2+0x3be>
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <__ieee754_rem_pio2+0x414>)
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	2302      	movs	r3, #2
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	4622      	mov	r2, r4
 8004478:	465b      	mov	r3, fp
 800447a:	4651      	mov	r1, sl
 800447c:	4648      	mov	r0, r9
 800447e:	f000 f817 	bl	80044b0 <__kernel_rem_pio2>
 8004482:	9b02      	ldr	r3, [sp, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	4683      	mov	fp, r0
 8004488:	f6bf ae46 	bge.w	8004118 <__ieee754_rem_pio2+0x80>
 800448c:	e9da 2100 	ldrd	r2, r1, [sl]
 8004490:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004494:	e9ca 2300 	strd	r2, r3, [sl]
 8004498:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800449c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80044a4:	e73a      	b.n	800431c <__ieee754_rem_pio2+0x284>
 80044a6:	bf00      	nop
 80044a8:	41700000 	.word	0x41700000
 80044ac:	08005290 	.word	0x08005290

080044b0 <__kernel_rem_pio2>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	ed2d 8b02 	vpush	{d8}
 80044b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80044bc:	f112 0f14 	cmn.w	r2, #20
 80044c0:	9308      	str	r3, [sp, #32]
 80044c2:	9101      	str	r1, [sp, #4]
 80044c4:	4bc4      	ldr	r3, [pc, #784]	; (80047d8 <__kernel_rem_pio2+0x328>)
 80044c6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80044c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80044ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044ce:	9302      	str	r3, [sp, #8]
 80044d0:	9b08      	ldr	r3, [sp, #32]
 80044d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80044d6:	bfa8      	it	ge
 80044d8:	1ed4      	subge	r4, r2, #3
 80044da:	9306      	str	r3, [sp, #24]
 80044dc:	bfb2      	itee	lt
 80044de:	2400      	movlt	r4, #0
 80044e0:	2318      	movge	r3, #24
 80044e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80044e6:	f06f 0317 	mvn.w	r3, #23
 80044ea:	fb04 3303 	mla	r3, r4, r3, r3
 80044ee:	eb03 0a02 	add.w	sl, r3, r2
 80044f2:	9b02      	ldr	r3, [sp, #8]
 80044f4:	9a06      	ldr	r2, [sp, #24]
 80044f6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80047c8 <__kernel_rem_pio2+0x318>
 80044fa:	eb03 0802 	add.w	r8, r3, r2
 80044fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004500:	1aa7      	subs	r7, r4, r2
 8004502:	ae22      	add	r6, sp, #136	; 0x88
 8004504:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004508:	2500      	movs	r5, #0
 800450a:	4545      	cmp	r5, r8
 800450c:	dd13      	ble.n	8004536 <__kernel_rem_pio2+0x86>
 800450e:	9b08      	ldr	r3, [sp, #32]
 8004510:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80047c8 <__kernel_rem_pio2+0x318>
 8004514:	aa22      	add	r2, sp, #136	; 0x88
 8004516:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800451a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800451e:	f04f 0800 	mov.w	r8, #0
 8004522:	9b02      	ldr	r3, [sp, #8]
 8004524:	4598      	cmp	r8, r3
 8004526:	dc2f      	bgt.n	8004588 <__kernel_rem_pio2+0xd8>
 8004528:	ed8d 8b04 	vstr	d8, [sp, #16]
 800452c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004530:	462f      	mov	r7, r5
 8004532:	2600      	movs	r6, #0
 8004534:	e01b      	b.n	800456e <__kernel_rem_pio2+0xbe>
 8004536:	42ef      	cmn	r7, r5
 8004538:	d407      	bmi.n	800454a <__kernel_rem_pio2+0x9a>
 800453a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800453e:	f7fb ffad 	bl	800049c <__aeabi_i2d>
 8004542:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004546:	3501      	adds	r5, #1
 8004548:	e7df      	b.n	800450a <__kernel_rem_pio2+0x5a>
 800454a:	ec51 0b18 	vmov	r0, r1, d8
 800454e:	e7f8      	b.n	8004542 <__kernel_rem_pio2+0x92>
 8004550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004554:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004558:	f7fc f80a 	bl	8000570 <__aeabi_dmul>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004564:	f7fb fe4e 	bl	8000204 <__adddf3>
 8004568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800456c:	3601      	adds	r6, #1
 800456e:	9b06      	ldr	r3, [sp, #24]
 8004570:	429e      	cmp	r6, r3
 8004572:	f1a7 0708 	sub.w	r7, r7, #8
 8004576:	ddeb      	ble.n	8004550 <__kernel_rem_pio2+0xa0>
 8004578:	ed9d 7b04 	vldr	d7, [sp, #16]
 800457c:	f108 0801 	add.w	r8, r8, #1
 8004580:	ecab 7b02 	vstmia	fp!, {d7}
 8004584:	3508      	adds	r5, #8
 8004586:	e7cc      	b.n	8004522 <__kernel_rem_pio2+0x72>
 8004588:	9b02      	ldr	r3, [sp, #8]
 800458a:	aa0e      	add	r2, sp, #56	; 0x38
 800458c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004590:	930d      	str	r3, [sp, #52]	; 0x34
 8004592:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004594:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004598:	9c02      	ldr	r4, [sp, #8]
 800459a:	930c      	str	r3, [sp, #48]	; 0x30
 800459c:	00e3      	lsls	r3, r4, #3
 800459e:	930a      	str	r3, [sp, #40]	; 0x28
 80045a0:	ab9a      	add	r3, sp, #616	; 0x268
 80045a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045a6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80045aa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80045ae:	ab72      	add	r3, sp, #456	; 0x1c8
 80045b0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80045b4:	46c3      	mov	fp, r8
 80045b6:	46a1      	mov	r9, r4
 80045b8:	f1b9 0f00 	cmp.w	r9, #0
 80045bc:	f1a5 0508 	sub.w	r5, r5, #8
 80045c0:	dc77      	bgt.n	80046b2 <__kernel_rem_pio2+0x202>
 80045c2:	ec47 6b10 	vmov	d0, r6, r7
 80045c6:	4650      	mov	r0, sl
 80045c8:	f000 fd56 	bl	8005078 <scalbn>
 80045cc:	ec57 6b10 	vmov	r6, r7, d0
 80045d0:	2200      	movs	r2, #0
 80045d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80045d6:	ee10 0a10 	vmov	r0, s0
 80045da:	4639      	mov	r1, r7
 80045dc:	f7fb ffc8 	bl	8000570 <__aeabi_dmul>
 80045e0:	ec41 0b10 	vmov	d0, r0, r1
 80045e4:	f000 fcc8 	bl	8004f78 <floor>
 80045e8:	4b7c      	ldr	r3, [pc, #496]	; (80047dc <__kernel_rem_pio2+0x32c>)
 80045ea:	ec51 0b10 	vmov	r0, r1, d0
 80045ee:	2200      	movs	r2, #0
 80045f0:	f7fb ffbe 	bl	8000570 <__aeabi_dmul>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4630      	mov	r0, r6
 80045fa:	4639      	mov	r1, r7
 80045fc:	f7fb fe00 	bl	8000200 <__aeabi_dsub>
 8004600:	460f      	mov	r7, r1
 8004602:	4606      	mov	r6, r0
 8004604:	f7fc fa4e 	bl	8000aa4 <__aeabi_d2iz>
 8004608:	9004      	str	r0, [sp, #16]
 800460a:	f7fb ff47 	bl	800049c <__aeabi_i2d>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4630      	mov	r0, r6
 8004614:	4639      	mov	r1, r7
 8004616:	f7fb fdf3 	bl	8000200 <__aeabi_dsub>
 800461a:	f1ba 0f00 	cmp.w	sl, #0
 800461e:	4606      	mov	r6, r0
 8004620:	460f      	mov	r7, r1
 8004622:	dd6d      	ble.n	8004700 <__kernel_rem_pio2+0x250>
 8004624:	1e62      	subs	r2, r4, #1
 8004626:	ab0e      	add	r3, sp, #56	; 0x38
 8004628:	9d04      	ldr	r5, [sp, #16]
 800462a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800462e:	f1ca 0118 	rsb	r1, sl, #24
 8004632:	fa40 f301 	asr.w	r3, r0, r1
 8004636:	441d      	add	r5, r3
 8004638:	408b      	lsls	r3, r1
 800463a:	1ac0      	subs	r0, r0, r3
 800463c:	ab0e      	add	r3, sp, #56	; 0x38
 800463e:	9504      	str	r5, [sp, #16]
 8004640:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004644:	f1ca 0317 	rsb	r3, sl, #23
 8004648:	fa40 fb03 	asr.w	fp, r0, r3
 800464c:	f1bb 0f00 	cmp.w	fp, #0
 8004650:	dd65      	ble.n	800471e <__kernel_rem_pio2+0x26e>
 8004652:	9b04      	ldr	r3, [sp, #16]
 8004654:	2200      	movs	r2, #0
 8004656:	3301      	adds	r3, #1
 8004658:	9304      	str	r3, [sp, #16]
 800465a:	4615      	mov	r5, r2
 800465c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004660:	4294      	cmp	r4, r2
 8004662:	f300 809c 	bgt.w	800479e <__kernel_rem_pio2+0x2ee>
 8004666:	f1ba 0f00 	cmp.w	sl, #0
 800466a:	dd07      	ble.n	800467c <__kernel_rem_pio2+0x1cc>
 800466c:	f1ba 0f01 	cmp.w	sl, #1
 8004670:	f000 80c0 	beq.w	80047f4 <__kernel_rem_pio2+0x344>
 8004674:	f1ba 0f02 	cmp.w	sl, #2
 8004678:	f000 80c6 	beq.w	8004808 <__kernel_rem_pio2+0x358>
 800467c:	f1bb 0f02 	cmp.w	fp, #2
 8004680:	d14d      	bne.n	800471e <__kernel_rem_pio2+0x26e>
 8004682:	4632      	mov	r2, r6
 8004684:	463b      	mov	r3, r7
 8004686:	4956      	ldr	r1, [pc, #344]	; (80047e0 <__kernel_rem_pio2+0x330>)
 8004688:	2000      	movs	r0, #0
 800468a:	f7fb fdb9 	bl	8000200 <__aeabi_dsub>
 800468e:	4606      	mov	r6, r0
 8004690:	460f      	mov	r7, r1
 8004692:	2d00      	cmp	r5, #0
 8004694:	d043      	beq.n	800471e <__kernel_rem_pio2+0x26e>
 8004696:	4650      	mov	r0, sl
 8004698:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80047d0 <__kernel_rem_pio2+0x320>
 800469c:	f000 fcec 	bl	8005078 <scalbn>
 80046a0:	4630      	mov	r0, r6
 80046a2:	4639      	mov	r1, r7
 80046a4:	ec53 2b10 	vmov	r2, r3, d0
 80046a8:	f7fb fdaa 	bl	8000200 <__aeabi_dsub>
 80046ac:	4606      	mov	r6, r0
 80046ae:	460f      	mov	r7, r1
 80046b0:	e035      	b.n	800471e <__kernel_rem_pio2+0x26e>
 80046b2:	4b4c      	ldr	r3, [pc, #304]	; (80047e4 <__kernel_rem_pio2+0x334>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	4630      	mov	r0, r6
 80046b8:	4639      	mov	r1, r7
 80046ba:	f7fb ff59 	bl	8000570 <__aeabi_dmul>
 80046be:	f7fc f9f1 	bl	8000aa4 <__aeabi_d2iz>
 80046c2:	f7fb feeb 	bl	800049c <__aeabi_i2d>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	ec43 2b18 	vmov	d8, r2, r3
 80046ce:	4b46      	ldr	r3, [pc, #280]	; (80047e8 <__kernel_rem_pio2+0x338>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	f7fb ff4d 	bl	8000570 <__aeabi_dmul>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4630      	mov	r0, r6
 80046dc:	4639      	mov	r1, r7
 80046de:	f7fb fd8f 	bl	8000200 <__aeabi_dsub>
 80046e2:	f7fc f9df 	bl	8000aa4 <__aeabi_d2iz>
 80046e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046ea:	f84b 0b04 	str.w	r0, [fp], #4
 80046ee:	ec51 0b18 	vmov	r0, r1, d8
 80046f2:	f7fb fd87 	bl	8000204 <__adddf3>
 80046f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80046fa:	4606      	mov	r6, r0
 80046fc:	460f      	mov	r7, r1
 80046fe:	e75b      	b.n	80045b8 <__kernel_rem_pio2+0x108>
 8004700:	d106      	bne.n	8004710 <__kernel_rem_pio2+0x260>
 8004702:	1e63      	subs	r3, r4, #1
 8004704:	aa0e      	add	r2, sp, #56	; 0x38
 8004706:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800470a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800470e:	e79d      	b.n	800464c <__kernel_rem_pio2+0x19c>
 8004710:	4b36      	ldr	r3, [pc, #216]	; (80047ec <__kernel_rem_pio2+0x33c>)
 8004712:	2200      	movs	r2, #0
 8004714:	f7fc f9b2 	bl	8000a7c <__aeabi_dcmpge>
 8004718:	2800      	cmp	r0, #0
 800471a:	d13d      	bne.n	8004798 <__kernel_rem_pio2+0x2e8>
 800471c:	4683      	mov	fp, r0
 800471e:	2200      	movs	r2, #0
 8004720:	2300      	movs	r3, #0
 8004722:	4630      	mov	r0, r6
 8004724:	4639      	mov	r1, r7
 8004726:	f7fc f98b 	bl	8000a40 <__aeabi_dcmpeq>
 800472a:	2800      	cmp	r0, #0
 800472c:	f000 80c0 	beq.w	80048b0 <__kernel_rem_pio2+0x400>
 8004730:	1e65      	subs	r5, r4, #1
 8004732:	462b      	mov	r3, r5
 8004734:	2200      	movs	r2, #0
 8004736:	9902      	ldr	r1, [sp, #8]
 8004738:	428b      	cmp	r3, r1
 800473a:	da6c      	bge.n	8004816 <__kernel_rem_pio2+0x366>
 800473c:	2a00      	cmp	r2, #0
 800473e:	f000 8089 	beq.w	8004854 <__kernel_rem_pio2+0x3a4>
 8004742:	ab0e      	add	r3, sp, #56	; 0x38
 8004744:	f1aa 0a18 	sub.w	sl, sl, #24
 8004748:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80ad 	beq.w	80048ac <__kernel_rem_pio2+0x3fc>
 8004752:	4650      	mov	r0, sl
 8004754:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80047d0 <__kernel_rem_pio2+0x320>
 8004758:	f000 fc8e 	bl	8005078 <scalbn>
 800475c:	ab9a      	add	r3, sp, #616	; 0x268
 800475e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004762:	ec57 6b10 	vmov	r6, r7, d0
 8004766:	00ec      	lsls	r4, r5, #3
 8004768:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800476c:	46aa      	mov	sl, r5
 800476e:	f1ba 0f00 	cmp.w	sl, #0
 8004772:	f280 80d6 	bge.w	8004922 <__kernel_rem_pio2+0x472>
 8004776:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80047c8 <__kernel_rem_pio2+0x318>
 800477a:	462e      	mov	r6, r5
 800477c:	2e00      	cmp	r6, #0
 800477e:	f2c0 8104 	blt.w	800498a <__kernel_rem_pio2+0x4da>
 8004782:	ab72      	add	r3, sp, #456	; 0x1c8
 8004784:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004788:	f8df a064 	ldr.w	sl, [pc, #100]	; 80047f0 <__kernel_rem_pio2+0x340>
 800478c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004790:	f04f 0800 	mov.w	r8, #0
 8004794:	1baf      	subs	r7, r5, r6
 8004796:	e0ea      	b.n	800496e <__kernel_rem_pio2+0x4be>
 8004798:	f04f 0b02 	mov.w	fp, #2
 800479c:	e759      	b.n	8004652 <__kernel_rem_pio2+0x1a2>
 800479e:	f8d8 3000 	ldr.w	r3, [r8]
 80047a2:	b955      	cbnz	r5, 80047ba <__kernel_rem_pio2+0x30a>
 80047a4:	b123      	cbz	r3, 80047b0 <__kernel_rem_pio2+0x300>
 80047a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80047aa:	f8c8 3000 	str.w	r3, [r8]
 80047ae:	2301      	movs	r3, #1
 80047b0:	3201      	adds	r2, #1
 80047b2:	f108 0804 	add.w	r8, r8, #4
 80047b6:	461d      	mov	r5, r3
 80047b8:	e752      	b.n	8004660 <__kernel_rem_pio2+0x1b0>
 80047ba:	1acb      	subs	r3, r1, r3
 80047bc:	f8c8 3000 	str.w	r3, [r8]
 80047c0:	462b      	mov	r3, r5
 80047c2:	e7f5      	b.n	80047b0 <__kernel_rem_pio2+0x300>
 80047c4:	f3af 8000 	nop.w
	...
 80047d4:	3ff00000 	.word	0x3ff00000
 80047d8:	080053d8 	.word	0x080053d8
 80047dc:	40200000 	.word	0x40200000
 80047e0:	3ff00000 	.word	0x3ff00000
 80047e4:	3e700000 	.word	0x3e700000
 80047e8:	41700000 	.word	0x41700000
 80047ec:	3fe00000 	.word	0x3fe00000
 80047f0:	08005398 	.word	0x08005398
 80047f4:	1e62      	subs	r2, r4, #1
 80047f6:	ab0e      	add	r3, sp, #56	; 0x38
 80047f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004800:	a90e      	add	r1, sp, #56	; 0x38
 8004802:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004806:	e739      	b.n	800467c <__kernel_rem_pio2+0x1cc>
 8004808:	1e62      	subs	r2, r4, #1
 800480a:	ab0e      	add	r3, sp, #56	; 0x38
 800480c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004810:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004814:	e7f4      	b.n	8004800 <__kernel_rem_pio2+0x350>
 8004816:	a90e      	add	r1, sp, #56	; 0x38
 8004818:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800481c:	3b01      	subs	r3, #1
 800481e:	430a      	orrs	r2, r1
 8004820:	e789      	b.n	8004736 <__kernel_rem_pio2+0x286>
 8004822:	3301      	adds	r3, #1
 8004824:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004828:	2900      	cmp	r1, #0
 800482a:	d0fa      	beq.n	8004822 <__kernel_rem_pio2+0x372>
 800482c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800482e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004832:	446a      	add	r2, sp
 8004834:	3a98      	subs	r2, #152	; 0x98
 8004836:	920a      	str	r2, [sp, #40]	; 0x28
 8004838:	9a08      	ldr	r2, [sp, #32]
 800483a:	18e3      	adds	r3, r4, r3
 800483c:	18a5      	adds	r5, r4, r2
 800483e:	aa22      	add	r2, sp, #136	; 0x88
 8004840:	f104 0801 	add.w	r8, r4, #1
 8004844:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004848:	9304      	str	r3, [sp, #16]
 800484a:	9b04      	ldr	r3, [sp, #16]
 800484c:	4543      	cmp	r3, r8
 800484e:	da04      	bge.n	800485a <__kernel_rem_pio2+0x3aa>
 8004850:	461c      	mov	r4, r3
 8004852:	e6a3      	b.n	800459c <__kernel_rem_pio2+0xec>
 8004854:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004856:	2301      	movs	r3, #1
 8004858:	e7e4      	b.n	8004824 <__kernel_rem_pio2+0x374>
 800485a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800485c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004860:	f7fb fe1c 	bl	800049c <__aeabi_i2d>
 8004864:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800486a:	46ab      	mov	fp, r5
 800486c:	461c      	mov	r4, r3
 800486e:	f04f 0900 	mov.w	r9, #0
 8004872:	2600      	movs	r6, #0
 8004874:	2700      	movs	r7, #0
 8004876:	9b06      	ldr	r3, [sp, #24]
 8004878:	4599      	cmp	r9, r3
 800487a:	dd06      	ble.n	800488a <__kernel_rem_pio2+0x3da>
 800487c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800487e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004882:	f108 0801 	add.w	r8, r8, #1
 8004886:	930a      	str	r3, [sp, #40]	; 0x28
 8004888:	e7df      	b.n	800484a <__kernel_rem_pio2+0x39a>
 800488a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800488e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004892:	f7fb fe6d 	bl	8000570 <__aeabi_dmul>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4630      	mov	r0, r6
 800489c:	4639      	mov	r1, r7
 800489e:	f7fb fcb1 	bl	8000204 <__adddf3>
 80048a2:	f109 0901 	add.w	r9, r9, #1
 80048a6:	4606      	mov	r6, r0
 80048a8:	460f      	mov	r7, r1
 80048aa:	e7e4      	b.n	8004876 <__kernel_rem_pio2+0x3c6>
 80048ac:	3d01      	subs	r5, #1
 80048ae:	e748      	b.n	8004742 <__kernel_rem_pio2+0x292>
 80048b0:	ec47 6b10 	vmov	d0, r6, r7
 80048b4:	f1ca 0000 	rsb	r0, sl, #0
 80048b8:	f000 fbde 	bl	8005078 <scalbn>
 80048bc:	ec57 6b10 	vmov	r6, r7, d0
 80048c0:	4ba0      	ldr	r3, [pc, #640]	; (8004b44 <__kernel_rem_pio2+0x694>)
 80048c2:	ee10 0a10 	vmov	r0, s0
 80048c6:	2200      	movs	r2, #0
 80048c8:	4639      	mov	r1, r7
 80048ca:	f7fc f8d7 	bl	8000a7c <__aeabi_dcmpge>
 80048ce:	b1f8      	cbz	r0, 8004910 <__kernel_rem_pio2+0x460>
 80048d0:	4b9d      	ldr	r3, [pc, #628]	; (8004b48 <__kernel_rem_pio2+0x698>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	4630      	mov	r0, r6
 80048d6:	4639      	mov	r1, r7
 80048d8:	f7fb fe4a 	bl	8000570 <__aeabi_dmul>
 80048dc:	f7fc f8e2 	bl	8000aa4 <__aeabi_d2iz>
 80048e0:	4680      	mov	r8, r0
 80048e2:	f7fb fddb 	bl	800049c <__aeabi_i2d>
 80048e6:	4b97      	ldr	r3, [pc, #604]	; (8004b44 <__kernel_rem_pio2+0x694>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	f7fb fe41 	bl	8000570 <__aeabi_dmul>
 80048ee:	460b      	mov	r3, r1
 80048f0:	4602      	mov	r2, r0
 80048f2:	4639      	mov	r1, r7
 80048f4:	4630      	mov	r0, r6
 80048f6:	f7fb fc83 	bl	8000200 <__aeabi_dsub>
 80048fa:	f7fc f8d3 	bl	8000aa4 <__aeabi_d2iz>
 80048fe:	1c65      	adds	r5, r4, #1
 8004900:	ab0e      	add	r3, sp, #56	; 0x38
 8004902:	f10a 0a18 	add.w	sl, sl, #24
 8004906:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800490a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800490e:	e720      	b.n	8004752 <__kernel_rem_pio2+0x2a2>
 8004910:	4630      	mov	r0, r6
 8004912:	4639      	mov	r1, r7
 8004914:	f7fc f8c6 	bl	8000aa4 <__aeabi_d2iz>
 8004918:	ab0e      	add	r3, sp, #56	; 0x38
 800491a:	4625      	mov	r5, r4
 800491c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004920:	e717      	b.n	8004752 <__kernel_rem_pio2+0x2a2>
 8004922:	ab0e      	add	r3, sp, #56	; 0x38
 8004924:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004928:	f7fb fdb8 	bl	800049c <__aeabi_i2d>
 800492c:	4632      	mov	r2, r6
 800492e:	463b      	mov	r3, r7
 8004930:	f7fb fe1e 	bl	8000570 <__aeabi_dmul>
 8004934:	4b84      	ldr	r3, [pc, #528]	; (8004b48 <__kernel_rem_pio2+0x698>)
 8004936:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800493a:	2200      	movs	r2, #0
 800493c:	4630      	mov	r0, r6
 800493e:	4639      	mov	r1, r7
 8004940:	f7fb fe16 	bl	8000570 <__aeabi_dmul>
 8004944:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004948:	4606      	mov	r6, r0
 800494a:	460f      	mov	r7, r1
 800494c:	e70f      	b.n	800476e <__kernel_rem_pio2+0x2be>
 800494e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004952:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004956:	f7fb fe0b 	bl	8000570 <__aeabi_dmul>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004962:	f7fb fc4f 	bl	8000204 <__adddf3>
 8004966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800496a:	f108 0801 	add.w	r8, r8, #1
 800496e:	9b02      	ldr	r3, [sp, #8]
 8004970:	4598      	cmp	r8, r3
 8004972:	dc01      	bgt.n	8004978 <__kernel_rem_pio2+0x4c8>
 8004974:	45b8      	cmp	r8, r7
 8004976:	ddea      	ble.n	800494e <__kernel_rem_pio2+0x49e>
 8004978:	ed9d 7b06 	vldr	d7, [sp, #24]
 800497c:	ab4a      	add	r3, sp, #296	; 0x128
 800497e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004982:	ed87 7b00 	vstr	d7, [r7]
 8004986:	3e01      	subs	r6, #1
 8004988:	e6f8      	b.n	800477c <__kernel_rem_pio2+0x2cc>
 800498a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800498c:	2b02      	cmp	r3, #2
 800498e:	dc0b      	bgt.n	80049a8 <__kernel_rem_pio2+0x4f8>
 8004990:	2b00      	cmp	r3, #0
 8004992:	dc35      	bgt.n	8004a00 <__kernel_rem_pio2+0x550>
 8004994:	d059      	beq.n	8004a4a <__kernel_rem_pio2+0x59a>
 8004996:	9b04      	ldr	r3, [sp, #16]
 8004998:	f003 0007 	and.w	r0, r3, #7
 800499c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80049a0:	ecbd 8b02 	vpop	{d8}
 80049a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d1f3      	bne.n	8004996 <__kernel_rem_pio2+0x4e6>
 80049ae:	ab4a      	add	r3, sp, #296	; 0x128
 80049b0:	4423      	add	r3, r4
 80049b2:	9306      	str	r3, [sp, #24]
 80049b4:	461c      	mov	r4, r3
 80049b6:	469a      	mov	sl, r3
 80049b8:	9502      	str	r5, [sp, #8]
 80049ba:	9b02      	ldr	r3, [sp, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f1aa 0a08 	sub.w	sl, sl, #8
 80049c2:	dc6b      	bgt.n	8004a9c <__kernel_rem_pio2+0x5ec>
 80049c4:	46aa      	mov	sl, r5
 80049c6:	f1ba 0f01 	cmp.w	sl, #1
 80049ca:	f1a4 0408 	sub.w	r4, r4, #8
 80049ce:	f300 8085 	bgt.w	8004adc <__kernel_rem_pio2+0x62c>
 80049d2:	9c06      	ldr	r4, [sp, #24]
 80049d4:	2000      	movs	r0, #0
 80049d6:	3408      	adds	r4, #8
 80049d8:	2100      	movs	r1, #0
 80049da:	2d01      	cmp	r5, #1
 80049dc:	f300 809d 	bgt.w	8004b1a <__kernel_rem_pio2+0x66a>
 80049e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80049e4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80049e8:	f1bb 0f00 	cmp.w	fp, #0
 80049ec:	f040 809b 	bne.w	8004b26 <__kernel_rem_pio2+0x676>
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	e9c3 5600 	strd	r5, r6, [r3]
 80049f6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80049fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80049fe:	e7ca      	b.n	8004996 <__kernel_rem_pio2+0x4e6>
 8004a00:	3408      	adds	r4, #8
 8004a02:	ab4a      	add	r3, sp, #296	; 0x128
 8004a04:	441c      	add	r4, r3
 8004a06:	462e      	mov	r6, r5
 8004a08:	2000      	movs	r0, #0
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	2e00      	cmp	r6, #0
 8004a0e:	da36      	bge.n	8004a7e <__kernel_rem_pio2+0x5ce>
 8004a10:	f1bb 0f00 	cmp.w	fp, #0
 8004a14:	d039      	beq.n	8004a8a <__kernel_rem_pio2+0x5da>
 8004a16:	4602      	mov	r2, r0
 8004a18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a1c:	9c01      	ldr	r4, [sp, #4]
 8004a1e:	e9c4 2300 	strd	r2, r3, [r4]
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004a2a:	f7fb fbe9 	bl	8000200 <__aeabi_dsub>
 8004a2e:	ae4c      	add	r6, sp, #304	; 0x130
 8004a30:	2401      	movs	r4, #1
 8004a32:	42a5      	cmp	r5, r4
 8004a34:	da2c      	bge.n	8004a90 <__kernel_rem_pio2+0x5e0>
 8004a36:	f1bb 0f00 	cmp.w	fp, #0
 8004a3a:	d002      	beq.n	8004a42 <__kernel_rem_pio2+0x592>
 8004a3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a40:	4619      	mov	r1, r3
 8004a42:	9b01      	ldr	r3, [sp, #4]
 8004a44:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004a48:	e7a5      	b.n	8004996 <__kernel_rem_pio2+0x4e6>
 8004a4a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004a4e:	eb0d 0403 	add.w	r4, sp, r3
 8004a52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004a56:	2000      	movs	r0, #0
 8004a58:	2100      	movs	r1, #0
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	da09      	bge.n	8004a72 <__kernel_rem_pio2+0x5c2>
 8004a5e:	f1bb 0f00 	cmp.w	fp, #0
 8004a62:	d002      	beq.n	8004a6a <__kernel_rem_pio2+0x5ba>
 8004a64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a68:	4619      	mov	r1, r3
 8004a6a:	9b01      	ldr	r3, [sp, #4]
 8004a6c:	e9c3 0100 	strd	r0, r1, [r3]
 8004a70:	e791      	b.n	8004996 <__kernel_rem_pio2+0x4e6>
 8004a72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004a76:	f7fb fbc5 	bl	8000204 <__adddf3>
 8004a7a:	3d01      	subs	r5, #1
 8004a7c:	e7ed      	b.n	8004a5a <__kernel_rem_pio2+0x5aa>
 8004a7e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004a82:	f7fb fbbf 	bl	8000204 <__adddf3>
 8004a86:	3e01      	subs	r6, #1
 8004a88:	e7c0      	b.n	8004a0c <__kernel_rem_pio2+0x55c>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	e7c5      	b.n	8004a1c <__kernel_rem_pio2+0x56c>
 8004a90:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004a94:	f7fb fbb6 	bl	8000204 <__adddf3>
 8004a98:	3401      	adds	r4, #1
 8004a9a:	e7ca      	b.n	8004a32 <__kernel_rem_pio2+0x582>
 8004a9c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004aa0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004aa4:	9b02      	ldr	r3, [sp, #8]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	9302      	str	r3, [sp, #8]
 8004aaa:	4632      	mov	r2, r6
 8004aac:	463b      	mov	r3, r7
 8004aae:	4640      	mov	r0, r8
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	f7fb fba7 	bl	8000204 <__adddf3>
 8004ab6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4640      	mov	r0, r8
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	f7fb fb9d 	bl	8000200 <__aeabi_dsub>
 8004ac6:	4632      	mov	r2, r6
 8004ac8:	463b      	mov	r3, r7
 8004aca:	f7fb fb9b 	bl	8000204 <__adddf3>
 8004ace:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004ad2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ad6:	ed8a 7b00 	vstr	d7, [sl]
 8004ada:	e76e      	b.n	80049ba <__kernel_rem_pio2+0x50a>
 8004adc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004ae0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	4632      	mov	r2, r6
 8004ae8:	463b      	mov	r3, r7
 8004aea:	4649      	mov	r1, r9
 8004aec:	f7fb fb8a 	bl	8000204 <__adddf3>
 8004af0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4640      	mov	r0, r8
 8004afa:	4649      	mov	r1, r9
 8004afc:	f7fb fb80 	bl	8000200 <__aeabi_dsub>
 8004b00:	4632      	mov	r2, r6
 8004b02:	463b      	mov	r3, r7
 8004b04:	f7fb fb7e 	bl	8000204 <__adddf3>
 8004b08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b10:	ed84 7b00 	vstr	d7, [r4]
 8004b14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b18:	e755      	b.n	80049c6 <__kernel_rem_pio2+0x516>
 8004b1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004b1e:	f7fb fb71 	bl	8000204 <__adddf3>
 8004b22:	3d01      	subs	r5, #1
 8004b24:	e759      	b.n	80049da <__kernel_rem_pio2+0x52a>
 8004b26:	9b01      	ldr	r3, [sp, #4]
 8004b28:	9a01      	ldr	r2, [sp, #4]
 8004b2a:	601d      	str	r5, [r3, #0]
 8004b2c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004b30:	605c      	str	r4, [r3, #4]
 8004b32:	609f      	str	r7, [r3, #8]
 8004b34:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004b38:	60d3      	str	r3, [r2, #12]
 8004b3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b3e:	6110      	str	r0, [r2, #16]
 8004b40:	6153      	str	r3, [r2, #20]
 8004b42:	e728      	b.n	8004996 <__kernel_rem_pio2+0x4e6>
 8004b44:	41700000 	.word	0x41700000
 8004b48:	3e700000 	.word	0x3e700000
 8004b4c:	00000000 	.word	0x00000000

08004b50 <__kernel_tan>:
 8004b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	ed2d 8b06 	vpush	{d8-d10}
 8004b58:	ec5b ab10 	vmov	sl, fp, d0
 8004b5c:	4be0      	ldr	r3, [pc, #896]	; (8004ee0 <__kernel_tan+0x390>)
 8004b5e:	b083      	sub	sp, #12
 8004b60:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8004b64:	429f      	cmp	r7, r3
 8004b66:	ec59 8b11 	vmov	r8, r9, d1
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	f8cd b000 	str.w	fp, [sp]
 8004b70:	dc61      	bgt.n	8004c36 <__kernel_tan+0xe6>
 8004b72:	ee10 0a10 	vmov	r0, s0
 8004b76:	4659      	mov	r1, fp
 8004b78:	f7fb ff94 	bl	8000aa4 <__aeabi_d2iz>
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	f040 8083 	bne.w	8004c8a <__kernel_tan+0x13a>
 8004b84:	1c73      	adds	r3, r6, #1
 8004b86:	4652      	mov	r2, sl
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	433b      	orrs	r3, r7
 8004b8c:	d112      	bne.n	8004bb4 <__kernel_tan+0x64>
 8004b8e:	ec4b ab10 	vmov	d0, sl, fp
 8004b92:	f000 f9e7 	bl	8004f64 <fabs>
 8004b96:	49d3      	ldr	r1, [pc, #844]	; (8004ee4 <__kernel_tan+0x394>)
 8004b98:	ec53 2b10 	vmov	r2, r3, d0
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f7fb fe11 	bl	80007c4 <__aeabi_ddiv>
 8004ba2:	4682      	mov	sl, r0
 8004ba4:	468b      	mov	fp, r1
 8004ba6:	ec4b ab10 	vmov	d0, sl, fp
 8004baa:	b003      	add	sp, #12
 8004bac:	ecbd 8b06 	vpop	{d8-d10}
 8004bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb4:	2e01      	cmp	r6, #1
 8004bb6:	d0f6      	beq.n	8004ba6 <__kernel_tan+0x56>
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	4650      	mov	r0, sl
 8004bbe:	4659      	mov	r1, fp
 8004bc0:	f7fb fb20 	bl	8000204 <__adddf3>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	460f      	mov	r7, r1
 8004bca:	2000      	movs	r0, #0
 8004bcc:	49c6      	ldr	r1, [pc, #792]	; (8004ee8 <__kernel_tan+0x398>)
 8004bce:	f7fb fdf9 	bl	80007c4 <__aeabi_ddiv>
 8004bd2:	e9cd 0100 	strd	r0, r1, [sp]
 8004bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bda:	462e      	mov	r6, r5
 8004bdc:	4652      	mov	r2, sl
 8004bde:	462c      	mov	r4, r5
 8004be0:	4630      	mov	r0, r6
 8004be2:	461d      	mov	r5, r3
 8004be4:	4639      	mov	r1, r7
 8004be6:	465b      	mov	r3, fp
 8004be8:	f7fb fb0a 	bl	8000200 <__aeabi_dsub>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	f7fb fb04 	bl	8000200 <__aeabi_dsub>
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	462b      	mov	r3, r5
 8004bfc:	f7fb fcb8 	bl	8000570 <__aeabi_dmul>
 8004c00:	4632      	mov	r2, r6
 8004c02:	4680      	mov	r8, r0
 8004c04:	4689      	mov	r9, r1
 8004c06:	462b      	mov	r3, r5
 8004c08:	4630      	mov	r0, r6
 8004c0a:	4639      	mov	r1, r7
 8004c0c:	f7fb fcb0 	bl	8000570 <__aeabi_dmul>
 8004c10:	4bb4      	ldr	r3, [pc, #720]	; (8004ee4 <__kernel_tan+0x394>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	f7fb faf6 	bl	8000204 <__adddf3>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4649      	mov	r1, r9
 8004c20:	f7fb faf0 	bl	8000204 <__adddf3>
 8004c24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c28:	f7fb fca2 	bl	8000570 <__aeabi_dmul>
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	462b      	mov	r3, r5
 8004c30:	f7fb fae8 	bl	8000204 <__adddf3>
 8004c34:	e7b5      	b.n	8004ba2 <__kernel_tan+0x52>
 8004c36:	4bad      	ldr	r3, [pc, #692]	; (8004eec <__kernel_tan+0x39c>)
 8004c38:	429f      	cmp	r7, r3
 8004c3a:	dd26      	ble.n	8004c8a <__kernel_tan+0x13a>
 8004c3c:	9b00      	ldr	r3, [sp, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da09      	bge.n	8004c56 <__kernel_tan+0x106>
 8004c42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004c46:	469b      	mov	fp, r3
 8004c48:	ee10 aa10 	vmov	sl, s0
 8004c4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004c50:	ee11 8a10 	vmov	r8, s2
 8004c54:	4699      	mov	r9, r3
 8004c56:	4652      	mov	r2, sl
 8004c58:	465b      	mov	r3, fp
 8004c5a:	a183      	add	r1, pc, #524	; (adr r1, 8004e68 <__kernel_tan+0x318>)
 8004c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c60:	f7fb face 	bl	8000200 <__aeabi_dsub>
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	4604      	mov	r4, r0
 8004c6a:	460d      	mov	r5, r1
 8004c6c:	a180      	add	r1, pc, #512	; (adr r1, 8004e70 <__kernel_tan+0x320>)
 8004c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c72:	f7fb fac5 	bl	8000200 <__aeabi_dsub>
 8004c76:	4622      	mov	r2, r4
 8004c78:	462b      	mov	r3, r5
 8004c7a:	f7fb fac3 	bl	8000204 <__adddf3>
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	4682      	mov	sl, r0
 8004c84:	468b      	mov	fp, r1
 8004c86:	f04f 0900 	mov.w	r9, #0
 8004c8a:	4652      	mov	r2, sl
 8004c8c:	465b      	mov	r3, fp
 8004c8e:	4650      	mov	r0, sl
 8004c90:	4659      	mov	r1, fp
 8004c92:	f7fb fc6d 	bl	8000570 <__aeabi_dmul>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	ec43 2b18 	vmov	d8, r2, r3
 8004c9e:	f7fb fc67 	bl	8000570 <__aeabi_dmul>
 8004ca2:	ec53 2b18 	vmov	r2, r3, d8
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	460d      	mov	r5, r1
 8004caa:	4650      	mov	r0, sl
 8004cac:	4659      	mov	r1, fp
 8004cae:	f7fb fc5f 	bl	8000570 <__aeabi_dmul>
 8004cb2:	a371      	add	r3, pc, #452	; (adr r3, 8004e78 <__kernel_tan+0x328>)
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	ec41 0b19 	vmov	d9, r0, r1
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	f7fb fc56 	bl	8000570 <__aeabi_dmul>
 8004cc4:	a36e      	add	r3, pc, #440	; (adr r3, 8004e80 <__kernel_tan+0x330>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	f7fb fa9b 	bl	8000204 <__adddf3>
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	f7fb fc4d 	bl	8000570 <__aeabi_dmul>
 8004cd6:	a36c      	add	r3, pc, #432	; (adr r3, 8004e88 <__kernel_tan+0x338>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb fa92 	bl	8000204 <__adddf3>
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	462b      	mov	r3, r5
 8004ce4:	f7fb fc44 	bl	8000570 <__aeabi_dmul>
 8004ce8:	a369      	add	r3, pc, #420	; (adr r3, 8004e90 <__kernel_tan+0x340>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f7fb fa89 	bl	8000204 <__adddf3>
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	f7fb fc3b 	bl	8000570 <__aeabi_dmul>
 8004cfa:	a367      	add	r3, pc, #412	; (adr r3, 8004e98 <__kernel_tan+0x348>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb fa80 	bl	8000204 <__adddf3>
 8004d04:	4622      	mov	r2, r4
 8004d06:	462b      	mov	r3, r5
 8004d08:	f7fb fc32 	bl	8000570 <__aeabi_dmul>
 8004d0c:	a364      	add	r3, pc, #400	; (adr r3, 8004ea0 <__kernel_tan+0x350>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fa77 	bl	8000204 <__adddf3>
 8004d16:	ec53 2b18 	vmov	r2, r3, d8
 8004d1a:	f7fb fc29 	bl	8000570 <__aeabi_dmul>
 8004d1e:	a362      	add	r3, pc, #392	; (adr r3, 8004ea8 <__kernel_tan+0x358>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	ec41 0b1a 	vmov	d10, r0, r1
 8004d28:	4620      	mov	r0, r4
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	f7fb fc20 	bl	8000570 <__aeabi_dmul>
 8004d30:	a35f      	add	r3, pc, #380	; (adr r3, 8004eb0 <__kernel_tan+0x360>)
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	f7fb fa65 	bl	8000204 <__adddf3>
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	f7fb fc17 	bl	8000570 <__aeabi_dmul>
 8004d42:	a35d      	add	r3, pc, #372	; (adr r3, 8004eb8 <__kernel_tan+0x368>)
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f7fb fa5c 	bl	8000204 <__adddf3>
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	462b      	mov	r3, r5
 8004d50:	f7fb fc0e 	bl	8000570 <__aeabi_dmul>
 8004d54:	a35a      	add	r3, pc, #360	; (adr r3, 8004ec0 <__kernel_tan+0x370>)
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	f7fb fa53 	bl	8000204 <__adddf3>
 8004d5e:	4622      	mov	r2, r4
 8004d60:	462b      	mov	r3, r5
 8004d62:	f7fb fc05 	bl	8000570 <__aeabi_dmul>
 8004d66:	a358      	add	r3, pc, #352	; (adr r3, 8004ec8 <__kernel_tan+0x378>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fa4a 	bl	8000204 <__adddf3>
 8004d70:	4622      	mov	r2, r4
 8004d72:	462b      	mov	r3, r5
 8004d74:	f7fb fbfc 	bl	8000570 <__aeabi_dmul>
 8004d78:	a355      	add	r3, pc, #340	; (adr r3, 8004ed0 <__kernel_tan+0x380>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fa41 	bl	8000204 <__adddf3>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	ec51 0b1a 	vmov	r0, r1, d10
 8004d8a:	f7fb fa3b 	bl	8000204 <__adddf3>
 8004d8e:	ec53 2b19 	vmov	r2, r3, d9
 8004d92:	f7fb fbed 	bl	8000570 <__aeabi_dmul>
 8004d96:	4642      	mov	r2, r8
 8004d98:	464b      	mov	r3, r9
 8004d9a:	f7fb fa33 	bl	8000204 <__adddf3>
 8004d9e:	ec53 2b18 	vmov	r2, r3, d8
 8004da2:	f7fb fbe5 	bl	8000570 <__aeabi_dmul>
 8004da6:	4642      	mov	r2, r8
 8004da8:	464b      	mov	r3, r9
 8004daa:	f7fb fa2b 	bl	8000204 <__adddf3>
 8004dae:	a34a      	add	r3, pc, #296	; (adr r3, 8004ed8 <__kernel_tan+0x388>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	4604      	mov	r4, r0
 8004db6:	460d      	mov	r5, r1
 8004db8:	ec51 0b19 	vmov	r0, r1, d9
 8004dbc:	f7fb fbd8 	bl	8000570 <__aeabi_dmul>
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	f7fb fa1e 	bl	8000204 <__adddf3>
 8004dc8:	460b      	mov	r3, r1
 8004dca:	ec41 0b18 	vmov	d8, r0, r1
 8004dce:	4602      	mov	r2, r0
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	4650      	mov	r0, sl
 8004dd4:	f7fb fa16 	bl	8000204 <__adddf3>
 8004dd8:	4b44      	ldr	r3, [pc, #272]	; (8004eec <__kernel_tan+0x39c>)
 8004dda:	429f      	cmp	r7, r3
 8004ddc:	4604      	mov	r4, r0
 8004dde:	460d      	mov	r5, r1
 8004de0:	f340 8086 	ble.w	8004ef0 <__kernel_tan+0x3a0>
 8004de4:	4630      	mov	r0, r6
 8004de6:	f7fb fb59 	bl	800049c <__aeabi_i2d>
 8004dea:	4622      	mov	r2, r4
 8004dec:	4680      	mov	r8, r0
 8004dee:	4689      	mov	r9, r1
 8004df0:	462b      	mov	r3, r5
 8004df2:	4620      	mov	r0, r4
 8004df4:	4629      	mov	r1, r5
 8004df6:	f7fb fbbb 	bl	8000570 <__aeabi_dmul>
 8004dfa:	4642      	mov	r2, r8
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	460f      	mov	r7, r1
 8004e00:	464b      	mov	r3, r9
 8004e02:	4620      	mov	r0, r4
 8004e04:	4629      	mov	r1, r5
 8004e06:	f7fb f9fd 	bl	8000204 <__adddf3>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4630      	mov	r0, r6
 8004e10:	4639      	mov	r1, r7
 8004e12:	f7fb fcd7 	bl	80007c4 <__aeabi_ddiv>
 8004e16:	ec53 2b18 	vmov	r2, r3, d8
 8004e1a:	f7fb f9f1 	bl	8000200 <__aeabi_dsub>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4650      	mov	r0, sl
 8004e24:	4659      	mov	r1, fp
 8004e26:	f7fb f9eb 	bl	8000200 <__aeabi_dsub>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	f7fb f9e9 	bl	8000204 <__adddf3>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4640      	mov	r0, r8
 8004e38:	4649      	mov	r1, r9
 8004e3a:	f7fb f9e1 	bl	8000200 <__aeabi_dsub>
 8004e3e:	9b00      	ldr	r3, [sp, #0]
 8004e40:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8004e44:	f00a 0a02 	and.w	sl, sl, #2
 8004e48:	4604      	mov	r4, r0
 8004e4a:	f1ca 0001 	rsb	r0, sl, #1
 8004e4e:	460d      	mov	r5, r1
 8004e50:	f7fb fb24 	bl	800049c <__aeabi_i2d>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4620      	mov	r0, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f7fb fb88 	bl	8000570 <__aeabi_dmul>
 8004e60:	e69f      	b.n	8004ba2 <__kernel_tan+0x52>
 8004e62:	bf00      	nop
 8004e64:	f3af 8000 	nop.w
 8004e68:	54442d18 	.word	0x54442d18
 8004e6c:	3fe921fb 	.word	0x3fe921fb
 8004e70:	33145c07 	.word	0x33145c07
 8004e74:	3c81a626 	.word	0x3c81a626
 8004e78:	74bf7ad4 	.word	0x74bf7ad4
 8004e7c:	3efb2a70 	.word	0x3efb2a70
 8004e80:	32f0a7e9 	.word	0x32f0a7e9
 8004e84:	3f12b80f 	.word	0x3f12b80f
 8004e88:	1a8d1068 	.word	0x1a8d1068
 8004e8c:	3f3026f7 	.word	0x3f3026f7
 8004e90:	fee08315 	.word	0xfee08315
 8004e94:	3f57dbc8 	.word	0x3f57dbc8
 8004e98:	e96e8493 	.word	0xe96e8493
 8004e9c:	3f8226e3 	.word	0x3f8226e3
 8004ea0:	1bb341fe 	.word	0x1bb341fe
 8004ea4:	3faba1ba 	.word	0x3faba1ba
 8004ea8:	db605373 	.word	0xdb605373
 8004eac:	bef375cb 	.word	0xbef375cb
 8004eb0:	a03792a6 	.word	0xa03792a6
 8004eb4:	3f147e88 	.word	0x3f147e88
 8004eb8:	f2f26501 	.word	0xf2f26501
 8004ebc:	3f4344d8 	.word	0x3f4344d8
 8004ec0:	c9560328 	.word	0xc9560328
 8004ec4:	3f6d6d22 	.word	0x3f6d6d22
 8004ec8:	8406d637 	.word	0x8406d637
 8004ecc:	3f9664f4 	.word	0x3f9664f4
 8004ed0:	1110fe7a 	.word	0x1110fe7a
 8004ed4:	3fc11111 	.word	0x3fc11111
 8004ed8:	55555563 	.word	0x55555563
 8004edc:	3fd55555 	.word	0x3fd55555
 8004ee0:	3e2fffff 	.word	0x3e2fffff
 8004ee4:	3ff00000 	.word	0x3ff00000
 8004ee8:	bff00000 	.word	0xbff00000
 8004eec:	3fe59427 	.word	0x3fe59427
 8004ef0:	2e01      	cmp	r6, #1
 8004ef2:	d02f      	beq.n	8004f54 <__kernel_tan+0x404>
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4689      	mov	r9, r1
 8004efc:	2000      	movs	r0, #0
 8004efe:	4917      	ldr	r1, [pc, #92]	; (8004f5c <__kernel_tan+0x40c>)
 8004f00:	f7fb fc60 	bl	80007c4 <__aeabi_ddiv>
 8004f04:	2600      	movs	r6, #0
 8004f06:	e9cd 0100 	strd	r0, r1, [sp]
 8004f0a:	4652      	mov	r2, sl
 8004f0c:	465b      	mov	r3, fp
 8004f0e:	4630      	mov	r0, r6
 8004f10:	4639      	mov	r1, r7
 8004f12:	f7fb f975 	bl	8000200 <__aeabi_dsub>
 8004f16:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	ec51 0b18 	vmov	r0, r1, d8
 8004f22:	f7fb f96d 	bl	8000200 <__aeabi_dsub>
 8004f26:	4632      	mov	r2, r6
 8004f28:	462b      	mov	r3, r5
 8004f2a:	f7fb fb21 	bl	8000570 <__aeabi_dmul>
 8004f2e:	46b0      	mov	r8, r6
 8004f30:	460f      	mov	r7, r1
 8004f32:	4642      	mov	r2, r8
 8004f34:	462b      	mov	r3, r5
 8004f36:	4634      	mov	r4, r6
 8004f38:	4649      	mov	r1, r9
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	f7fb fb17 	bl	8000570 <__aeabi_dmul>
 8004f42:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <__kernel_tan+0x410>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	f7fb f95d 	bl	8000204 <__adddf3>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4630      	mov	r0, r6
 8004f50:	4639      	mov	r1, r7
 8004f52:	e665      	b.n	8004c20 <__kernel_tan+0xd0>
 8004f54:	4682      	mov	sl, r0
 8004f56:	468b      	mov	fp, r1
 8004f58:	e625      	b.n	8004ba6 <__kernel_tan+0x56>
 8004f5a:	bf00      	nop
 8004f5c:	bff00000 	.word	0xbff00000
 8004f60:	3ff00000 	.word	0x3ff00000

08004f64 <fabs>:
 8004f64:	ec51 0b10 	vmov	r0, r1, d0
 8004f68:	ee10 2a10 	vmov	r2, s0
 8004f6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f70:	ec43 2b10 	vmov	d0, r2, r3
 8004f74:	4770      	bx	lr
	...

08004f78 <floor>:
 8004f78:	ec51 0b10 	vmov	r0, r1, d0
 8004f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004f84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004f88:	2e13      	cmp	r6, #19
 8004f8a:	ee10 5a10 	vmov	r5, s0
 8004f8e:	ee10 8a10 	vmov	r8, s0
 8004f92:	460c      	mov	r4, r1
 8004f94:	dc32      	bgt.n	8004ffc <floor+0x84>
 8004f96:	2e00      	cmp	r6, #0
 8004f98:	da14      	bge.n	8004fc4 <floor+0x4c>
 8004f9a:	a333      	add	r3, pc, #204	; (adr r3, 8005068 <floor+0xf0>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f7fb f930 	bl	8000204 <__adddf3>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f7fb fd72 	bl	8000a90 <__aeabi_dcmpgt>
 8004fac:	b138      	cbz	r0, 8004fbe <floor+0x46>
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	da57      	bge.n	8005062 <floor+0xea>
 8004fb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004fb6:	431d      	orrs	r5, r3
 8004fb8:	d001      	beq.n	8004fbe <floor+0x46>
 8004fba:	4c2d      	ldr	r4, [pc, #180]	; (8005070 <floor+0xf8>)
 8004fbc:	2500      	movs	r5, #0
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	e025      	b.n	8005010 <floor+0x98>
 8004fc4:	4f2b      	ldr	r7, [pc, #172]	; (8005074 <floor+0xfc>)
 8004fc6:	4137      	asrs	r7, r6
 8004fc8:	ea01 0307 	and.w	r3, r1, r7
 8004fcc:	4303      	orrs	r3, r0
 8004fce:	d01f      	beq.n	8005010 <floor+0x98>
 8004fd0:	a325      	add	r3, pc, #148	; (adr r3, 8005068 <floor+0xf0>)
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	f7fb f915 	bl	8000204 <__adddf3>
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f7fb fd57 	bl	8000a90 <__aeabi_dcmpgt>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d0eb      	beq.n	8004fbe <floor+0x46>
 8004fe6:	2c00      	cmp	r4, #0
 8004fe8:	bfbe      	ittt	lt
 8004fea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004fee:	fa43 f606 	asrlt.w	r6, r3, r6
 8004ff2:	19a4      	addlt	r4, r4, r6
 8004ff4:	ea24 0407 	bic.w	r4, r4, r7
 8004ff8:	2500      	movs	r5, #0
 8004ffa:	e7e0      	b.n	8004fbe <floor+0x46>
 8004ffc:	2e33      	cmp	r6, #51	; 0x33
 8004ffe:	dd0b      	ble.n	8005018 <floor+0xa0>
 8005000:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005004:	d104      	bne.n	8005010 <floor+0x98>
 8005006:	ee10 2a10 	vmov	r2, s0
 800500a:	460b      	mov	r3, r1
 800500c:	f7fb f8fa 	bl	8000204 <__adddf3>
 8005010:	ec41 0b10 	vmov	d0, r0, r1
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005018:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
 8005020:	fa23 f707 	lsr.w	r7, r3, r7
 8005024:	4207      	tst	r7, r0
 8005026:	d0f3      	beq.n	8005010 <floor+0x98>
 8005028:	a30f      	add	r3, pc, #60	; (adr r3, 8005068 <floor+0xf0>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f7fb f8e9 	bl	8000204 <__adddf3>
 8005032:	2200      	movs	r2, #0
 8005034:	2300      	movs	r3, #0
 8005036:	f7fb fd2b 	bl	8000a90 <__aeabi_dcmpgt>
 800503a:	2800      	cmp	r0, #0
 800503c:	d0bf      	beq.n	8004fbe <floor+0x46>
 800503e:	2c00      	cmp	r4, #0
 8005040:	da02      	bge.n	8005048 <floor+0xd0>
 8005042:	2e14      	cmp	r6, #20
 8005044:	d103      	bne.n	800504e <floor+0xd6>
 8005046:	3401      	adds	r4, #1
 8005048:	ea25 0507 	bic.w	r5, r5, r7
 800504c:	e7b7      	b.n	8004fbe <floor+0x46>
 800504e:	2301      	movs	r3, #1
 8005050:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005054:	fa03 f606 	lsl.w	r6, r3, r6
 8005058:	4435      	add	r5, r6
 800505a:	4545      	cmp	r5, r8
 800505c:	bf38      	it	cc
 800505e:	18e4      	addcc	r4, r4, r3
 8005060:	e7f2      	b.n	8005048 <floor+0xd0>
 8005062:	2500      	movs	r5, #0
 8005064:	462c      	mov	r4, r5
 8005066:	e7aa      	b.n	8004fbe <floor+0x46>
 8005068:	8800759c 	.word	0x8800759c
 800506c:	7e37e43c 	.word	0x7e37e43c
 8005070:	bff00000 	.word	0xbff00000
 8005074:	000fffff 	.word	0x000fffff

08005078 <scalbn>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	ec55 4b10 	vmov	r4, r5, d0
 800507e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005082:	4606      	mov	r6, r0
 8005084:	462b      	mov	r3, r5
 8005086:	b99a      	cbnz	r2, 80050b0 <scalbn+0x38>
 8005088:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800508c:	4323      	orrs	r3, r4
 800508e:	d036      	beq.n	80050fe <scalbn+0x86>
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <scalbn+0x100>)
 8005092:	4629      	mov	r1, r5
 8005094:	ee10 0a10 	vmov	r0, s0
 8005098:	2200      	movs	r2, #0
 800509a:	f7fb fa69 	bl	8000570 <__aeabi_dmul>
 800509e:	4b37      	ldr	r3, [pc, #220]	; (800517c <scalbn+0x104>)
 80050a0:	429e      	cmp	r6, r3
 80050a2:	4604      	mov	r4, r0
 80050a4:	460d      	mov	r5, r1
 80050a6:	da10      	bge.n	80050ca <scalbn+0x52>
 80050a8:	a32b      	add	r3, pc, #172	; (adr r3, 8005158 <scalbn+0xe0>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	e03a      	b.n	8005126 <scalbn+0xae>
 80050b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80050b4:	428a      	cmp	r2, r1
 80050b6:	d10c      	bne.n	80050d2 <scalbn+0x5a>
 80050b8:	ee10 2a10 	vmov	r2, s0
 80050bc:	4620      	mov	r0, r4
 80050be:	4629      	mov	r1, r5
 80050c0:	f7fb f8a0 	bl	8000204 <__adddf3>
 80050c4:	4604      	mov	r4, r0
 80050c6:	460d      	mov	r5, r1
 80050c8:	e019      	b.n	80050fe <scalbn+0x86>
 80050ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80050ce:	460b      	mov	r3, r1
 80050d0:	3a36      	subs	r2, #54	; 0x36
 80050d2:	4432      	add	r2, r6
 80050d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80050d8:	428a      	cmp	r2, r1
 80050da:	dd08      	ble.n	80050ee <scalbn+0x76>
 80050dc:	2d00      	cmp	r5, #0
 80050de:	a120      	add	r1, pc, #128	; (adr r1, 8005160 <scalbn+0xe8>)
 80050e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e4:	da1c      	bge.n	8005120 <scalbn+0xa8>
 80050e6:	a120      	add	r1, pc, #128	; (adr r1, 8005168 <scalbn+0xf0>)
 80050e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ec:	e018      	b.n	8005120 <scalbn+0xa8>
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	dd08      	ble.n	8005104 <scalbn+0x8c>
 80050f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80050f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80050fe:	ec45 4b10 	vmov	d0, r4, r5
 8005102:	bd70      	pop	{r4, r5, r6, pc}
 8005104:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005108:	da19      	bge.n	800513e <scalbn+0xc6>
 800510a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800510e:	429e      	cmp	r6, r3
 8005110:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005114:	dd0a      	ble.n	800512c <scalbn+0xb4>
 8005116:	a112      	add	r1, pc, #72	; (adr r1, 8005160 <scalbn+0xe8>)
 8005118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e2      	bne.n	80050e6 <scalbn+0x6e>
 8005120:	a30f      	add	r3, pc, #60	; (adr r3, 8005160 <scalbn+0xe8>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f7fb fa23 	bl	8000570 <__aeabi_dmul>
 800512a:	e7cb      	b.n	80050c4 <scalbn+0x4c>
 800512c:	a10a      	add	r1, pc, #40	; (adr r1, 8005158 <scalbn+0xe0>)
 800512e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0b8      	beq.n	80050a8 <scalbn+0x30>
 8005136:	a10e      	add	r1, pc, #56	; (adr r1, 8005170 <scalbn+0xf8>)
 8005138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800513c:	e7b4      	b.n	80050a8 <scalbn+0x30>
 800513e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005142:	3236      	adds	r2, #54	; 0x36
 8005144:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005148:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800514c:	4620      	mov	r0, r4
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <scalbn+0x108>)
 8005150:	2200      	movs	r2, #0
 8005152:	e7e8      	b.n	8005126 <scalbn+0xae>
 8005154:	f3af 8000 	nop.w
 8005158:	c2f8f359 	.word	0xc2f8f359
 800515c:	01a56e1f 	.word	0x01a56e1f
 8005160:	8800759c 	.word	0x8800759c
 8005164:	7e37e43c 	.word	0x7e37e43c
 8005168:	8800759c 	.word	0x8800759c
 800516c:	fe37e43c 	.word	0xfe37e43c
 8005170:	c2f8f359 	.word	0xc2f8f359
 8005174:	81a56e1f 	.word	0x81a56e1f
 8005178:	43500000 	.word	0x43500000
 800517c:	ffff3cb0 	.word	0xffff3cb0
 8005180:	3c900000 	.word	0x3c900000

08005184 <__libc_init_array>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	4d0d      	ldr	r5, [pc, #52]	; (80051bc <__libc_init_array+0x38>)
 8005188:	4c0d      	ldr	r4, [pc, #52]	; (80051c0 <__libc_init_array+0x3c>)
 800518a:	1b64      	subs	r4, r4, r5
 800518c:	10a4      	asrs	r4, r4, #2
 800518e:	2600      	movs	r6, #0
 8005190:	42a6      	cmp	r6, r4
 8005192:	d109      	bne.n	80051a8 <__libc_init_array+0x24>
 8005194:	4d0b      	ldr	r5, [pc, #44]	; (80051c4 <__libc_init_array+0x40>)
 8005196:	4c0c      	ldr	r4, [pc, #48]	; (80051c8 <__libc_init_array+0x44>)
 8005198:	f000 f820 	bl	80051dc <_init>
 800519c:	1b64      	subs	r4, r4, r5
 800519e:	10a4      	asrs	r4, r4, #2
 80051a0:	2600      	movs	r6, #0
 80051a2:	42a6      	cmp	r6, r4
 80051a4:	d105      	bne.n	80051b2 <__libc_init_array+0x2e>
 80051a6:	bd70      	pop	{r4, r5, r6, pc}
 80051a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ac:	4798      	blx	r3
 80051ae:	3601      	adds	r6, #1
 80051b0:	e7ee      	b.n	8005190 <__libc_init_array+0xc>
 80051b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b6:	4798      	blx	r3
 80051b8:	3601      	adds	r6, #1
 80051ba:	e7f2      	b.n	80051a2 <__libc_init_array+0x1e>
 80051bc:	080053f0 	.word	0x080053f0
 80051c0:	080053f0 	.word	0x080053f0
 80051c4:	080053f0 	.word	0x080053f0
 80051c8:	080053f4 	.word	0x080053f4

080051cc <memset>:
 80051cc:	4402      	add	r2, r0
 80051ce:	4603      	mov	r3, r0
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d100      	bne.n	80051d6 <memset+0xa>
 80051d4:	4770      	bx	lr
 80051d6:	f803 1b01 	strb.w	r1, [r3], #1
 80051da:	e7f9      	b.n	80051d0 <memset+0x4>

080051dc <_init>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr

080051e8 <_fini>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	bf00      	nop
 80051ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ee:	bc08      	pop	{r3}
 80051f0:	469e      	mov	lr, r3
 80051f2:	4770      	bx	lr
